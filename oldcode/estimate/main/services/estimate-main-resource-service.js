/**
 * $Id$
 * Copyright (c) RIB Software SE
 */

(function(angular) {


	'use strict';

	let moduleName = 'estimate.main';
	let estimateMainModule = angular.module(moduleName);
	/**
	 * @ngdoc service
	 * @name estimateMainResourceService
	 * @function
	 * @description
	 * estimateMainResourceService is the data service for estimate line item resource related functionality.
	 */
	/* jshint -W072 */ // many parameters because of dependency injection
	/* jshint -W003 */ //
	estimateMainModule.factory('estimateMainResourceService',
		['_', '$q', '$http', '$injector', '$translate', 'globals', 'estimateMainService','estimateMainCommonService', 'estimateMainCommonCalculationService',
			'platformDataServiceFactory', 'ServiceDataProcessArraysExtension', 'estimateMainResourceImageProcessor', 'cloudCommonGridService',
			'estimateMainResourceProcessor', 'estimateMainFilterService', 'estimateMainConfigDetailService', 'PlatformMessenger',
			'basicsLookupdataLookupDescriptorService', 'estimateMainGenerateSortingService', 'estimateMainExchangeRateService', 'estimateMainDynamicColumnFilterService',
			'estimateMainPrjMaterialLookupService', 'basicsLookupdataLookupFilterService', 'platformDataServiceModificationTrackingExtension','estimateMainResourceType', 'estimateMainPlantAssemblyHandlerService',
			/* jshint -W071 */ // many parameters because of dependency injection
			function (_, $q, $http, $injector, $translate, globals, estimateMainService , estimateMainCommonService, estimateMainCommonCalculationService,
				platformDataServiceFactory, ServiceDataProcessArraysExtension, estimateMainResourceImageProcessor,
				cloudCommonGridService, estimateMainResourceProcessor, estimateMainFilterService, estimateMainConfigDetailService,
				PlatformMessenger, basicsLookupdataLookupDescriptorService, estimateMainGenerateSortingService,
				estimateMainExchangeRateService, estimateMainDynamicColumnFilterService, estimateMainPrjMaterialLookupService, basicsLookupdataLookupFilterService, platformDataServiceModificationTrackingExtension, estimateMainResourceType, estimateMainPlantAssemblyHandlerService) {

				let isReadOnlyService = false;
				let hasCostCodeCharacteristic = false;
				let parentItem = null;
				let materialLookupSelectedItems = null;
				let parentScope = null;
				let existingCodes = [];

				function isLineItemSelectedUnChange(lineItem){
					const lineItemEntitiesSelected = estimateMainService.getSelectedEntities();
					const lineItemSelected = angular.isArray(lineItemEntitiesSelected) && lineItemEntitiesSelected.length > 0 ? lineItemEntitiesSelected[0] : null;
					return lineItem && lineItemSelected && lineItemSelected.Id === lineItem.Id;
				}

				function isResourcesLoaded(lineItem){
					return !!(lineItem && parentItem && lineItem.Id === parentItem.Id) && isLineItemSelectedUnChange(lineItem);
				}

				let canResource = function canResource() {
					let selectedLineItem = estimateMainService.getSelected();
					let selectedCombinedLineItem = selectedLineItem;

					if (selectedCombinedLineItem && selectedCombinedLineItem.CombinedLineItemsSimple !== null) {
						selectedLineItem = selectedCombinedLineItem.CombinedLineItemsSimple[0];
					}

					// LineItem Reference
					if (selectedLineItem && selectedLineItem.EstLineItemFk > 0) {
						return false;
					}

					// COMPOUND ASSEMBLY TYPES
					let selectedRes = service.getSelected();
					if (selectedRes && selectedRes.EstResourceTypeFk === estimateMainResourceType.Assembly && selectedRes.EstAssemblyTypeFk) {
						if(selectedRes.RuleCode)
						{
							return  false;
						}
						return !isParentCompositeResource(selectedRes);
					}
					if (selectedRes && isParentCompositeResource(selectedRes)) {
						return false;
					}
					if (selectedRes && selectedRes.EstRuleSourceFk && selectedRes.EstResourceFk) {
						return false;
					}

					var parentResource = selectedRes != null ? service.getItemById(selectedRes.EstResourceFk) : null;
					if(parentResource && parentResource.EstResourceTypeFk === estimateMainResourceType.EquipmentAssembly) {
						return false;
					}

					return !(selectedLineItem && selectedLineItem.EstLineItemFk > 0) && !(selectedLineItem && selectedLineItem.EstRuleSourceFk > 0);
				};

				let canChildResource = function canChildResource() {
					let selectedLineItem = estimateMainService.getSelected();
					let selectedRes = service.getSelected();
					let showPlantAsOneRecord = estimateMainService.getShowPlantAsOneRecordOption();
					if(showPlantAsOneRecord && selectedRes && selectedRes.EstResourceTypeFk === estimateMainResourceType.Plant){
						return false;
					}
					// if resource is generated by rule, can not add child
					if (!selectedRes || selectedRes.EstRuleSourceFk) {
						return false;
					}

					return ((canResource() && !(selectedRes && (selectedRes.EstResourceTypeFk !== estimateMainResourceType.Plant && selectedRes.EstResourceTypeFk !== estimateMainResourceType.PlantDissolved && selectedRes.EstResourceTypeFk !== estimateMainResourceType.SubItem)))) && !(selectedLineItem.EstRuleSourceFk > 0);
				};

				function initCreationData(creationData, data, lineItem){
					let selectedItem = lineItem ? lineItem : estimateMainService.getSelected();
					let selectedResourceItem = serviceContainer.service.getSelected();
					creationData.projectId = estimateMainService.getSelectedProjectId();
					if (selectedResourceItem && selectedResourceItem.Id > 0 && creationData.parentId) {
						creationData.resourceItemId = creationData.parentId;
						creationData.estHeaderFk = selectedResourceItem.EstHeaderFk;
						creationData.estLineItemFk = selectedResourceItem.EstLineItemFk;
						creationData.Currency1Fk = selectedResourceItem.Currency1Fk;
						creationData.Currency2Fk = selectedResourceItem.Currency2Fk;
						creationData.GcBreakdownTypeFk = selectedResourceItem.GcBreakdownTypeFk;
						if(selectedResourceItem.EstResourceTypeFk === estimateMainResourceType.SubItem) {
							creationData.IsDisabled = creationData.parent.IsDisabled;
						}
					} else if (selectedItem && selectedItem.Id > 0) {
						creationData.estHeaderFk = selectedItem.EstHeaderFk;
						creationData.estLineItemFk = selectedItem.Id;
						creationData.Currency1Fk = selectedItem.Currency1Fk;
						creationData.Currency2Fk = selectedItem.Currency2Fk;
						creationData.GcBreakdownTypeFk = selectedItem.GcBreakdownTypeFk;
					}
					creationData.sortNo = estimateMainGenerateSortingService.generateSorting(selectedResourceItem, service.getList(), creationData);
				}

				// The instance of the main service - to be filled with functionality below
				let estimateMainResourceServiceOption = {
					hierarchicalNodeItem: {
						module: estimateMainModule,
						serviceName: 'estimateMainResourceService',
						entityNameTranslationID: 'estimate.main.resourceContainer',
						httpCreate: {route: globals.webApiBaseUrl + 'estimate/main/resource/', endCreate: 'create'},
						httpRead: {
							route: globals.webApiBaseUrl + 'estimate/main/resource/',
							endRead: 'tree',
							initReadData: function initReadData(readData) {
								// let selectedItem = estimateMainService.getSelected();
								let selectedEntities = estimateMainService.getSelectedEntities();

								let selectedItem = _.isArray(selectedEntities) && selectedEntities.length > 0 ? selectedEntities[0] : estimateMainService.getSelected();

								readData.isLineItemResource = true;

								if(selectedItem) {
									if (selectedItem.CombinedLineItemsSimple) {
										selectedItem = selectedItem.CombinedLineItemsSimple[0];
									}

									readData.estHeaderFk = selectedItem.EstHeaderFk;
									readData.estLineItemFk = selectedItem.Id;
								}

								readData.currentLineItem = selectedItem;

								readData.projectId = estimateMainService.getProjectId();

								let selectedProject = estimateMainService.getSelectedProjectInfo();
								if (selectedProject) {
									readData.projectCurrencyFk = selectedProject.ProjectCurrency;
								}
							},
							usePostForRead: true
						},

						httpUpdate: {route: globals.webApiBaseUrl + 'estimate/main/lineitem/', endUpdate: 'update'},

						actions: {
							create: 'hierarchical',
							canCreateCallBackFunc: canResource,
							canCreateChildCallBackFunc: canChildResource,
							delete: {},
							canDeleteCallBackFunc: canResource
						},
						entitySelection: {},
						setCellFocus: true,
						presenter: {
							tree: {
								parentProp: 'EstResourceFk',
								childProp: 'EstResources',
								childSort: true,
								isDynamicModified: true,
								isInitialSorted: true,
								sortOptions: {initialSortColumn: {field: 'Sorting', id: 'sorting'}, isAsc: true, doNumericComparison: true},
								initCreationData: initCreationData,
								incorporateDataRead: function incorporateDataRead(readData, data) {
									// load user defined column value
									let estimateMainResourceDynamicUserDefinedColumnService = $injector.get('estimateMainResourceDynamicUserDefinedColumnService');
									if(readData && readData.dynamicColumns && _.isArray(readData.dynamicColumns.ResoruceUDPs) && readData.dynamicColumns.ResoruceUDPs.length > 0){
										estimateMainResourceDynamicUserDefinedColumnService.attachUpdatedValueToColumn(readData.dtos, readData.dynamicColumns.ResoruceUDPs, false);
									}

									if(readData && readData.LineItem){
										parentItem = readData.LineItem;
										// readonly the resources of reference lineItem
										if(_.isNumber(readData.LineItem.EstLineItemFk)){
											let flatResList = [];
											cloudCommonGridService.flatten(data, flatResList, 'EstResources');
											estimateMainResourceProcessor.readOnly(flatResList || [], true);
										}
									}

									estimateMainService.setIsUpdateDataByParameter(false);
									// we add default characteristics and existing characteristics to the result list and update the grid columns
									$injector.get('estimateMainResourceCharacteristicsService').setDynamicColumnsLayout(readData);
									setResourceCurrencies(readData.dtos);

									setDataOriginal(readData);
									setLookupData(readData.dtos);

									service.sortTree(readData.dtos);

									_.forEach(readData.dtos, function (item){
										item.PackageAssignmentsBak = item.PackageAssignments;
										estimateMainCommonService.translateCommentCol(item);
										if(item.EstResources && item.EstResources.length > 0){
											_.forEach(item.EstResources, function (res){
												estimateMainCommonService.translateCommentCol(res);
											});
										}
									});

									basicsLookupdataLookupDescriptorService.updateData('estresource4itemassignment', readData.dtos);

									$injector.get('estimateMainCostUnitManageService').setEnableEstResourceCostUnitAdvanceEditing(readData.EnableEstResourceCostUnitAdvanceEditing);

									let lineItem = estimateMainService.getSelected();
									let defer = $q.defer();
									$injector.get('estimateMainResourceDetailService').setResourcesBusinessPartnerName(lineItem, readData.dtos).then(function () {
										let selectResIds = lastSelectedResource ?  _.map(lastSelectedResource, 'Id') : null;
										let handleResult = serviceContainer.data.handleReadSucceeded(readData.dtos, data);

										let platformGridAPI = $injector.get('platformGridAPI');
										let gridId = service.getGridId();
										if (gridId && platformGridAPI.grids.exist(gridId)) {
											let grid = platformGridAPI.grids.element('id', gridId);
											if (grid && grid.dataView) {
												if (readData.AllowDefaultExpansionOfEstimateResources) {
													platformGridAPI.grids.getOptions(gridId).treeGridLevel;
												} else if (!readData.AllowDefaultExpansionOfEstimateResources) {
													grid.dataView.collapseAllNodes(gridId);
												}
											}
										}

										if(!!selectResIds && selectResIds.length > 0){
											service.setSelectedEntities(_.filter(readData.dtos, function (item){ return selectResIds.indexOf(item.Id) >= 0; }));
											lastSelectedResource = null;
										}

										estimateMainResourceDynamicUserDefinedColumnService.updateColumnsReadOnlyStats(data.getList());

										estimateMainResourceProcessor.setDisabledChildrenReadOnly(service.getList());
										defer.resolve(handleResult);

										let flatResList = [];
										cloudCommonGridService.flatten(readData.dtos, flatResList, 'EstResources');
										estimateMainCommonService.checkDetailFormat(flatResList, service);
									});

									serviceContainer.data.flatten(readData.dtos || [], [], serviceContainer.data.treePresOpt.childProp);
									return defer.promise;
								},
								handleCreateSucceeded: function (newData) {
									// set Indirect Cost based on LineItem's IsGc flag
									let lineItem = estimateMainService.getSelected();
									if (lineItem && lineItem.Id) {
										service.setIndirectCost([newData], lineItem.IsGc);
										newData.PrcStructureFk = lineItem.PrcStructureFk;

										let parentJobFk = null;
										let parentResource = _.find(service.getList(), {Id: newData.EstResourceFk});
										if (parentResource) {
											parentJobFk = parentResource.LgmJobFk;
										}
										newData.parentJobFk = parentJobFk || lineItem.LgmJobFk || lineItem.parentJobFk;
									}
									setNewResourceCurrency(newData);
									calculateCurrencies(newData);
									setChildResourceDisabled(newData);
									doSetShortKeyReadOnly(newData, service);

									estimateMainCommonService.resetLookupItem();
									// we add default characteristics with default values to the new item
									estimateMainCommonService.appendCharactiricColumnData(getCharDefaults(), service, [newData], true);

									// add empty user defined column value to new item.
									let estimateMainResourceDynamicUserDefinedColumnService = $injector.get('estimateMainResourceDynamicUserDefinedColumnService');
									estimateMainResourceDynamicUserDefinedColumnService.attachEmptyDataToColumn(newData);

									return newData;
								}
							}
						},

						dataProcessor: [new ServiceDataProcessArraysExtension(['EstResources']), estimateMainResourceImageProcessor, estimateMainResourceProcessor],
						entityRole: {
							node: {
								codeField: 'Code',
								itemName: 'EstResource',
								moduleName: 'Estimate Main',
								parentService: estimateMainService
							}
						},
						translation: {
							uid: 'estimateMainResourceService',
							title: 'estimate.main.resourceContainer',
							columns: [{header: 'cloud.common.entityDescription', field: 'DescriptionInfo',maxLength : 255}],
							dtoScheme: {
								typeName: 'EstResourceDto',
								moduleSubModule: 'Estimate.Main'
							}
						},
					}
				};


				let serviceContainer = platformDataServiceFactory.createNewComplete(estimateMainResourceServiceOption);

				// Do not download data when container is not displayed
				serviceContainer.data.doesRequireLoadAlways = true;

				let service = serviceContainer.service;
				service.toolHasAdded = false;
				service.calcResources = new PlatformMessenger();
				service.refreshData = new PlatformMessenger();
				service.updateResourcePackageAssignment = new PlatformMessenger();
				service.isResourcesLoaded = isResourcesLoaded;
				service.isLineItemSelectedUnChange = isLineItemSelectedUnChange;

				service.processItems = function(){
					$injector.get('platformDataServiceDataProcessorExtension').doProcessData(serviceContainer.data.itemList, serviceContainer.data);
				}

				let lastSelectedResource = null;
				service.setLastSelectedResource = function (resources) {
					lastSelectedResource = resources;
				};

				let baseOnDeleteDone = serviceContainer.data.onDeleteDone;

				let deleteFromDrag = false;
				service.DeleteResourceByDropDrag = function (deleteParams) { // delete the resource from  assign assembly ( drag/drop assembly ,change assembly , change assembly by bulk editor)
					deleteFromDrag = true;
					serviceContainer.data.deleteEntities(deleteParams.entities, serviceContainer.data, true).then(function () {
						deleteFromDrag = false;
					});
				};

				let baseOnCreateItem = service.createItem;
				service.createItem = function () {
					const lineItem = estimateMainService.getSelected();
					if (lineItem && !estimateMainService.isLineItemStatusReadonly(lineItem.Id, lineItem.EstHeaderFk)) {
						let defer = $q.defer();
						// setDynamicColumnsLayoutToGrid(estCharacteristicsColumns);
						$injector.get('estimateMainResourceCharacteristicsService').setDefaultColsToGrid().then(function () {
							defer.resolve(baseOnCreateItem(null, serviceContainer.data));
						});

						return defer.promise;
					}
				};

				service.createItemEx = function (lineItem, onCreateSucceeded) {
					var creationData = {};
					creationData.parentId = null;
					if (angular.isObject(lineItem)) {
						creationData.MainItemId = lineItem.Id;
					}
					initCreationData(creationData, serviceContainer.data, lineItem);
					return serviceContainer.data.doCallHTTPCreate(creationData, serviceContainer.data, onCreateSucceeded);
				};

				service.markAsModifiedEx = function(entity) {
					var modState = $injector.get('platformModuleStateService').state(service.getModule());
					var elemState = service.assertPath(modState.modifications, false, entity);
					service.addEntityToModified(elemState, entity, modState.modifications);
				}

				service.setScope = function (scope) {
					parentScope = scope;
				};

				service.markAsDeleted = function(entity){
					platformDataServiceModificationTrackingExtension.markAsDeleted(service, entity, serviceContainer.data);
				};

				function isAdvancedAllowanceCostCode(resource)
				{
					let advancedAllowanceCostCodeFk = $injector.get('estimateMainContextDataService').getAdvancedAllowanceCc();

					if (!advancedAllowanceCostCodeFk) { return false; }

					return (resource.EstResourceTypeFk === estimateMainResourceType.Assembly || resource.EstResourceTypeFk === estimateMainResourceType.CostCode) && resource.MdcCostCodeFk === advancedAllowanceCostCodeFk;
				}



				service.HandleAAColumnReadOnly = function HandleAAColumnReadOnly(entities) {
					let estLineItem = estimateMainService.getSelected();
					if(estLineItem.AdvancedAllowance !== 0){
						let resources = service.getList();
						let AAResources = _.filter(resources,function (resource) {
							return isAdvancedAllowanceCostCode(resource);
						});
						let DeleteAAResources = _.filter(entities,function (resource) {
							return isAdvancedAllowanceCostCode(resource);
						});
						if(AAResources.length && DeleteAAResources.length && AAResources.length === DeleteAAResources.length){
							estLineItem.AdvancedAllUnit = 0;
							estLineItem.AdvancedAllUnitItem = 0;
							estLineItem.AdvancedAll = 0;
							if(estLineItem.IsNoMarkup || estLineItem.IsOptional || estLineItem.IsGc){
								estimateMainService.setAAReadonly(true,estimateMainService.getSelected());
							}else {
								estimateMainService.setAAReadonly(false,estimateMainService.getSelected());
							}
						}
					}
				};

				service.deleteEntities = function deleteEntities(entities, skipDialog){
					let resource = entities && entities.length ? entities[0] : null;
					if(resource && estimateMainService.isLineItemStatusReadonly(resource.EstLineItemFk, resource.EstHeaderFk)){
						return $injector.get('platformDialogService').showDialog({iconClass: 'info', headerText$tr$: 'cloud.common.infoBoxHeader', bodyText$tr$: 'estimate.main.readOnlyLineItemDeleteText', showOkButton: true});
					}

					if(!skipDialog){
						let paramerData = [];
						service.GetResourceDeleteEntitys(entities,paramerData);
						$http.post(globals.webApiBaseUrl + 'procurement/common/prcitemassignment/ValidPackageByEstimateLineItems', paramerData).then(function (res){
							if(res && res.data){
								estimateMainService.deleteItemsVaildPackage({dontShowAgain : true, id: service.getGridId()});
							}else {
								let platformDeleteSelectionDialogService = $injector.get('platformDeleteSelectionDialogService');
								platformDeleteSelectionDialogService.showDialog({dontShowAgain : true, id: service.getGridId()}).then(result => {
									if (result.ok || result.delete) {
										service.HandleAAColumnReadOnly(entities);
										serviceContainer.data.deleteEntities(entities, serviceContainer.data);
									}
								});
							}
						});
					}else{
						serviceContainer.data.deleteEntities(entities, serviceContainer.data);
					}
				};
				service.GetResourceDeleteEntitys = function GetResourceDeleteEntitys(entitys,paramerData){
					_.forEach(entitys,function (item){
						let paramData ={};
						paramData.LineItemFk = item.EstLineItemFk;
						paramData.ResourceFk = item.Id;
						paramerData.push(paramData);
						if(item.HasChildren){
							GetResourceDeleteEntitys(item.EstResources,paramerData);
						}
					});
				};
				function updateLineItemBreakdownType(breakdownType, resources) {
					if (resources) {
						resources.forEach((item) => {
							item.GcBreakdownTypeFk = breakdownType;
						});
						service.markEntitiesAsModified(resources);
					}
				}

				service.handleGcBreakdownType = function handleGcBreakdownType(lineItem, breakdownType,resourceList) {
					if(lineItem.IsGc) {
						updateLineItemBreakdownType(breakdownType, resourceList);
					}
				}

				service.handleGcBreakdownDragDrop = function handleGcBreakdownDragDrop(lineItem, itemsToMove, itemList) {

					itemsToMove.forEach(itemToMove => {

						let flatResList = [];

						let item = _.find(itemList, { 'Id': itemToMove.Id });
						let parentRes = _.find(itemList, { 'Id': item.EstResourceFk });
						let breakdownTypeFk = parentRes && parentRes.GcBreakdownTypeFk ? parentRes.GcBreakdownTypeFk : lineItem.GcBreakdownTypeFk;

						_.find(itemList, { 'Id': itemToMove.Id }).GcBreakdownTypeFk = breakdownTypeFk;

						if (itemToMove.EstResources.length > 0) {

							cloudCommonGridService.flatten(itemToMove.EstResources, flatResList, 'EstResources');

							flatResList.forEach(child =>{
								let foundChild = _.find(itemList, { 'Id': child.Id });
								if (foundChild) {
									foundChild.GcBreakdownTypeFk = breakdownTypeFk;
								}
							});
						}
					});

				};

				service.addList = function addList(data) {
					let itemList = serviceContainer.data.itemList;
					let itemTree = serviceContainer.data.itemTree;
					if (data && data.length) {
						angular.forEach(data, function (d) {
							let listItem = _.find(itemList, {Id: d.Id});
							if (listItem) {
								angular.extend(itemList[itemList.indexOf(listItem)], d);

							} else {
								serviceContainer.data.itemList.push(d);
							}

							let treeItem = _.find(itemTree, {Id: d.Id});
							if(d.EstResourceFk === null){
								if (treeItem) {
									angular.extend(itemTree[itemTree.indexOf(treeItem)], d);
								} else {
									serviceContainer.data.itemTree.push(d);
								}
							}
						});
					}
					cloudCommonGridService.sortTree(serviceContainer.data.itemList, 'Sorting', 'EstResources');
					cloudCommonGridService.sortTree(serviceContainer.data.itemTree, 'Sorting', 'EstResources');
				};

				service.removeItem = function removeItem(item) {
					if(item.EstResourceFk){
						_.remove( _.find(serviceContainer.data.itemList, {Id: item.EstResourceFk}).EstResources, {Id: item.Id});
					}
					_.remove(serviceContainer.data.itemList, {Id: item.Id});
					_.remove(serviceContainer.data.itemTree, {Id: item.Id});
					cloudCommonGridService.sortTree(serviceContainer.data.itemList, 'Sorting', 'EstResources');
					service.gridRefresh();
				};

				serviceContainer.data.onDeleteDone = function (deleteParams, data, response) {
					// Remove dynamic columns //This should be places here or it will throw error to delete resource columns
					$injector.get('estimateMainResourceCharacteristicsService').deleteDynColumns(deleteParams.entities);

					baseOnDeleteDone(deleteParams, data, response); // remove the deleted item form list

					let selectedLineItem = estimateMainService.getSelected();

					if (!deleteFromDrag) {  // here no need calculate lineitem if delete the resource from  assign assembly ( drag/drop assembly ,change assembly , change assembly by bulk editor)
						estimateMainCommonService.calculateExtendColumnValuesOfLineItem(selectedLineItem, service.getTree());
						//service.calcResources.fire(service.getTree());
						service.calculateAfterDelete(deleteParams, selectedLineItem);
					}

					$injector.get('estimateMainResourceValidationService').validateSubItemsUniqueCodeFromAssembly(service.getTree());

					// remove the user defined column value of deleted resource
					let estimateMainResourceDynamicUserDefinedColumnService = $injector.get('estimateMainResourceDynamicUserDefinedColumnService');
					estimateMainResourceDynamicUserDefinedColumnService.handleEntitiesDeleted(deleteParams.entities, selectedLineItem, service.getTree());

					service.gridRefresh(); // Refresh UI to clear validation marks
				};

				service.deleteResources = function deleteResources(resourcesToDelete) {
					if (resourcesToDelete && resourcesToDelete.length > 0) {
						let deleteParams = {
							entities: resourcesToDelete,
							index: 1,
							service: service
						};

						baseOnDeleteDone(deleteParams, serviceContainer.data, null);
					}
				};

				service.calculateAfterDelete = function(deleteParams, selectedLineItem){
					const resourcesToCalculate = new Set();
					_.forEach(deleteParams.entities, function (entity) {
						if (entity.EstResourceFk) {
							const parentResource = _.find(service.getList(), {Id: entity.EstResourceFk});
							if (parentResource) {
								resourcesToCalculate.add(parentResource);
							}
						}
					});

					_.forEach(Array.from(resourcesToCalculate), function (resource) {
						estimateMainCommonService.calculateResource(resource, selectedLineItem, service.getList());
					});

					if(resourcesToCalculate.size === 0){
						estimateMainCommonService.calculateLineItemAndResources(selectedLineItem, service.getList());
					}
				};

				estimateMainFilterService.onUpdated.register(function () {
					let list = estimateMainService.getList();
					if (list && list.length === 0) {
						estimateMainService.deselect();
					}
					service.gridRefresh();
				});

				service.setList = function setList(data, isReadOnly) {
					data = data ? data : [];

					cloudCommonGridService.sortTree(data, 'Sorting', 'EstResources');
					serviceContainer.data.itemTree = _.filter(data, function (item) {
						return item.EstResourceFk === null;
					});
					let flatResList = [];
					cloudCommonGridService.flatten(data, flatResList, 'EstResources');
					flatResList = _.uniq(flatResList, 'Id');
					estimateMainResourceImageProcessor.processItems(flatResList);
					estimateMainResourceProcessor.processItems(flatResList, false);
					serviceContainer.data.itemList = flatResList;
					if (isReadOnly) {
						estimateMainResourceProcessor.readOnly(flatResList, !!isReadOnly);
					} else {
						let resourcesGeneratedByRule = _.filter(flatResList, function (item) {
							return item.EstRuleSourceFk > 0;
						});
						estimateMainResourceProcessor.readOnly(resourcesGeneratedByRule, true);
					}

				};

				service.fireListLoaded = function fireListLoaded() {
					serviceContainer.data.listLoaded.fire();
				};

				service.updateList = function updateList(resList, isReadOnly) {
					service.setList(resList, isReadOnly);
					service.fireListLoaded();
				};

				service.transformAssembly2Subitem = function (assembly) {
					// change assembly to subitem
					// 4=Assembly, 5=Subitem
					if (assembly.EstResourceTypeFk === estimateMainResourceType.Assembly) {
						assembly.EstResourceTypeFk = assembly.EstResourceTypeFkExtend = 5;
					}
					estimateMainResourceImageProcessor.processItem(assembly);
				};

				service.getContainerData = function getContainerData() {
					return serviceContainer.data;
				};

				service.resolveResourceFromAssembly = function (lineItem, assemblyResources, parentResource) {
					let data = serviceContainer.data;

					let traverse = function (resItem) {
						// assign to selected line item
						if (lineItem) {
							resItem.EstLineItemFk = lineItem.Id;
							resItem.EstHeaderFk = lineItem.EstHeaderFk;
						}

						if (resItem.EstResourceTypeFk === estimateMainResourceType.CostCode) {
							let mdcCC = basicsLookupdataLookupDescriptorService.getData('estcostcodeslist');
							let item = _.find(mdcCC, {Id: resItem.MdcCostCodeFk});
							if (item) {
								estimateMainCommonService.addPrjCostCodes(item);
							}
						}

						data.itemList.push(resItem);
						if (!resItem[data.treePresOpt.childProp]) {
							resItem[data.treePresOpt.childProp] = [];
						}

						_.forEach(data.processor, function (proc) {
							proc.processItem(resItem);
						});

						data.markItemAsModified(resItem, data);

						_.each(resItem[data.treePresOpt.childProp], function (child) {
							traverse(child, resItem);
						});
					};

					let materialIdList = [];
					_.each(assemblyResources, function (item) {
						item.IsDisabled = parentResource ? parentResource.IsDisabled : item.IsDisabled;
						item.IsDisabledPrc = parentResource ? parentResource.IsDisabledPrc : item.IsDisabledPrc;
						if (item.EstResourceTypeFk === estimateMainResourceType.Material) {
							materialIdList.push(item.MdcMaterialFk);
						}
						if (parentResource) {
							parentResource.HasChildren = true;
							parentResource[data.treePresOpt.childProp].push(item);
							item[data.treePresOpt.parentProp] = parentResource.Id;
						} else {
							data.itemTree.push(item);
						}
						traverse(item);
					});

					estimateMainPrjMaterialLookupService.loadPrjMaterial();
					estimateMainPrjMaterialLookupService.getBaseMaterials(materialIdList).then(function (data) {
						let mdcCC = basicsLookupdataLookupDescriptorService.getData('estcostcodeslist');
						angular.forEach(data, function (item) {
							estimateMainPrjMaterialLookupService.addPrjMaterial(item);

							if (item.MdcCostCodeFk !== null) {
								let mdcCostCode = _.find(mdcCC, {Id: item.MdcCostCodeFk});
								if (mdcCostCode) {
									estimateMainCommonService.addPrjCostCodes(mdcCostCode);
								}
							}
						});

					});
					estimateMainResourceProcessor.processItem(parentResource);
					data.listLoaded.fire();
				};

				service.clearModifications = function clearModifications() {
					let items = serviceContainer.data.itemList;
					angular.forEach(items, function (item) {
						serviceContainer.data.doClearModifications(item, serviceContainer.data);
					});
				};

				service.sortTree = function sortTree(items) {
					serviceContainer.data.sortByColumn(items);
				};

				service.hasToLoadOnSelectionChange = function hasToLoadOnSelectionChange(lineItem) {
					serviceContainer.data.doNotLoadOnSelectionChange = !!lineItem.EstLineItemFk;
				};

				service.setItemResources = function setItemResources(lineItem) {
					if (lineItem) {
						let list = serviceContainer.data.itemTree;
						let filteredList = _.filter(list, function (li) {
							return li.EstLineItemFk === lineItem.Id;
						});
						serviceContainer.data.itemTree = filteredList;
						service.fireListLoaded();
					}
				};

				let defaultResource = null;
				service.resetToDefault = function resetToDefault(itemToReset) {
					let id = itemToReset.Id;

					if (defaultResource) {
						itemToReset = defaultResource;
						itemToReset.Id = id;

					} else {
						let creationData = {};
						let selectedItem = estimateMainService.getSelected();
						let selectedResourceItem = serviceContainer.service.getSelected();
						creationData.projectId = estimateMainService.getSelectedProjectId();
						if (selectedResourceItem && selectedResourceItem.Id > 0) {
							creationData.resourceItemId = creationData.parentId;
							creationData.estHeaderFk = selectedResourceItem.EstHeaderFk;
							creationData.estLineItemFk = selectedResourceItem.EstLineItemFk;
						} else if (selectedItem && selectedItem.Id > 0) {
							creationData.estHeaderFk = selectedItem.EstHeaderFk;
							creationData.estLineItemFk = selectedItem.Id;
						}
					}
				};

				service.setLineTypeReadOnly = function setLineTypeReadOnly(readItems) {
					angular.forEach(readItems, function (item) {
						if (!_.isEmpty(item.Code)) {
							estimateMainResourceProcessor.setLineTypeReadOnly(item, true);
						}

						if (!_.isEmpty(item.EstResources)) {
							setLineTypeReadOnly(item.EstResources);
						}
					});
				};
				// Copy function is used in drag drop service // Insert item at the same level where dropped
				service.copyAssembliesToEstResource = function copyAssembliesToEstResource(lineItem, assemblyIds, isDrag) {
					let selectedResource = service.getSelected();

					let postData = {
						MainItemId: lineItem.Id,
						ItemIds: assemblyIds,
						ResourceType: 4, // Assembly
						JobId: $injector.get('estimateMainJobDataService').getJobFkWhenCopyAssembly(),
						IsDrag: isDrag
					};
					getAssemblyResourcesRequest(postData).then(function (data) {
						let resourceTrees = data.resources || []; // Array of tree resources
						let resCharacteristics = data.resourcesCharacteristics || [];
						let resAssemblyCharacteristics = data.resourcesAssembliesCharacteristics || [];

						// union assembly-resource-characteristics and estimate-resource-characteristics
						_.forEach(resAssemblyCharacteristics, function (resAssemblyCharacteristic) {
							_.remove(resCharacteristics, {CharacteristicFk: resAssemblyCharacteristic.CharacteristicFk});
						});
						resCharacteristics = resCharacteristics.concat(resAssemblyCharacteristics);

						// Follow this order to process tree resources
						setAssemblyResourcesTreeNodeInfo(selectedResource, resourceTrees);

						setAssemblyResourcesTreeToContainerData(resourceTrees, null, selectedResource);

						// Lastly calculate totals and validate sub items
						calculateResolvedAssembliesAndValidateSubItemsCode(lineItem);

						// Assign characteristics
						// Characteristic require a resource to be selected, for Copy function we select the first resource
						serviceContainer.data.selectedItem = _.first(resourceTrees);
						setResourceCharacteristics(resCharacteristics);
						service.deselect();

						// Process resources along with res-characteristics dynamic columns
						processResolvedItems(resourceTrees);

						let estimateMainResourceDynamicUserDefinedColumnService = $injector.get('estimateMainResourceDynamicUserDefinedColumnService');
						estimateMainResourceDynamicUserDefinedColumnService.processNewResourceTrees(resourceTrees, lineItem);

						service.gridRefresh();

						estimateMainResourceProcessor.setDisabledChildrenReadOnly(serviceContainer.service.getList());

						estimateMainService.markItemAsModified(lineItem);
						estimateMainService.gridRefresh();

					});
				};

				// Move function is used in drag drop service
				service.moveAssembliesToEstResource = function moveAssembliesToEstResource(lineItem, assemblyIds, addToSubItem, isDrag) {
					let selectedResource = service.getSelected();
					let subItemToAssign = addToSubItem ? selectedResource : null;

					let postData = {
						MainItemId: lineItem.Id,
						ItemIds: assemblyIds,
						ResourceType: 4, // Assembly
						JobId: $injector.get('estimateMainJobDataService').getJobFkWhenMoveAssembly(),
						IsDrag: isDrag
					};
					getAssemblyResourcesRequest(postData).then(function (data) {
						let resourceTrees = data.resources || []; // Array of tree resources
						let resCharacteristics = data.resourcesCharacteristics || [];
						let resAssemblyCharacteristics = data.resourcesAssembliesCharacteristics || [];

						// union assembly-resource-characteristics and estimate-resource-characteristics
						_.forEach(resAssemblyCharacteristics, function (resAssemblyCharacteristic) {
							_.remove(resCharacteristics, {CharacteristicFk: resAssemblyCharacteristic.CharacteristicFk});
						});
						resCharacteristics = resCharacteristics.concat(resAssemblyCharacteristics);
						// Follow this order to process tree resources
						setAssemblyResourcesTreeNodeInfo(selectedResource, resourceTrees, subItemToAssign);

						if (resourceType === 3) {
							estimateMainPlantAssemblyHandlerService.setPlantAssemblyResourcesTreeToContainerData(resourceTrees, subItemToAssign);
						} else {
							setAssemblyResourcesTreeToContainerData(resourceTrees, subItemToAssign);

						}

						// Attach user defined price value to resoruce
						if (angular.isArray(data.UserDefinedcolsOfResource)) {
							setUserDefinedColToResource(lineItem, resourceTrees, data.UserDefinedcolsOfResource);
						}

						// Lastly calculate totals and validate sub items
						calculateResolvedAssembliesAndValidateSubItemsCode(lineItem);

						// Assign characteristics
						// Characteristic require a resource to be selected, this is internal selection and does not trigger any other event
						if (!selectedResource) {
							serviceContainer.data.selectedItem = _.first(resourceTrees);
						}
						setResourceCharacteristics(resCharacteristics);
						service.deselect();

						// Process resources along with res-characteristics dynamic columns
						processResolvedItems(resourceTrees);

						service.gridRefresh();
						estimateMainService.markItemAsModified(lineItem);
						estimateMainService.gridRefresh();
					});
				};

				let oldNewResourceMapping = {};
				// Resolve function to process resource, returns processed resource(Assembly converted, Cost code, Material processed) in tree structure
				service.resolveResourcesAndAssign = function resolveResourcesAndAssign(lineItem, assemblyIds, resourceType, prjCostCodeIds, plantAssemblyDictionary) {
					let selectedResource = service.getSelected();
					let selectedResourceParent = service.getItemById(selectedResource.EstResourceFk);
					let subItemToAssign = selectedResourceParent ? selectedResourceParent : null;
					let postData = {
						MainItemId: lineItem.Id,
						ItemIds: assemblyIds,
						ResourceType: resourceType,
						JobId: $injector.get('estimateMainJobDataService').getJobFk(),
						ParentResourceFk: subItemToAssign ? subItemToAssign.Id : null,
						SortNo: service.getSelected() ? service.getSelected().Sorting : 1
					};

					if(prjCostCodeIds && _.isArray(prjCostCodeIds)) {
						postData.PrjItemIds = prjCostCodeIds;
					}

					if(plantAssemblyDictionary){
						postData.PlantAssemblyDictionary = plantAssemblyDictionary;
					}

					postData.selectedItemId = selectedResource.Id;

					const translationKey = {
						1: 'estimate.main.addCostCode',
						2: 'estimate.main.addMaterial',
						4: 'estimate.main.addAssembly',
					}[resourceType];
					parentScope.loadingText = translationKey ? $translate.instant(translationKey) : parentScope.loadingText;
					parentScope.isLoading = true;

					return getAssemblyResourcesRequest(postData).then(function (data) {
						let resourceTrees = data.resources || []; // Array of tree resources
						let resCharacteristics = data.resourcesCharacteristics || [];
						let resAssemblyCharacteristics = data.resourcesAssembliesCharacteristics || [];

						// union assembly-resource-characteristics and estimate-resource-characteristics
						_.forEach(resAssemblyCharacteristics, function (resAssemblyCharacteristic) {
							_.remove(resCharacteristics, {CharacteristicFk: resAssemblyCharacteristic.CharacteristicFk});
						});
						resCharacteristics = resCharacteristics.concat(resAssemblyCharacteristics);
						clearValidationFromCurrentResource(selectedResource);

						if (existingCodes && Array.isArray(existingCodes) && existingCodes.length > 0) {
							service.showWarning('estimate.main.uniqEquipmentAssemblyCode',existingCodes);
						}

						if(resourceTrees.length > 0) {
							let showPlantAsOneRecord = estimateMainService.getShowPlantAsOneRecordOption();

							if(showPlantAsOneRecord && _.first(resourceTrees).EstResourceTypeFk === estimateMainResourceType.SubItem){
								let plantResources = _.first(resourceTrees).EstResources;
								if(plantResources &&  plantResources[0].EstResourceTypeFk === estimateMainResourceType.Plant){
									resourceType =  plantResources[0].EstResourceTypeFk;
								}
							}

							if (resourceType === estimateMainResourceType.Plant || resourceType === estimateMainResourceType.PlantDissolved) {
								estimateMainPlantAssemblyHandlerService.setPlantAssemblyResourcesTreeNodeInfo(resourceTrees, selectedResource, service);
							} else {
								setAssemblyResourcesTreeNodeInfo(selectedResource, resourceTrees, subItemToAssign);
							}

							let firstAssemblyId = _.first(resourceTrees).EstAssemblyFk;
							let firstAssemblyPlantFk = _.first(resourceTrees).EtmPlantFk;
							let gcBreakdownTypeFk = selectedResource.GcBreakdownTypeFk;



							const mergeId = resourceType === estimateMainResourceType.CostCode ? _.first(resourceTrees).MdcCostCodeFk : resourceType === estimateMainResourceType.Material ? _.first(resourceTrees).MdcMaterialFk : null;

							let isPlant = isPlantTypeResource(resourceType)
							if((isPlant && !showPlantAsOneRecord) || (!isPlant)){
								mergeCurrentResource(selectedResource, resourceTrees, _.includes(assemblyIds, firstAssemblyId) ? firstAssemblyId : mergeId, resourceType, resourceType === estimateMainResourceType.CostCode ? _.first(resourceTrees).ProjectCostCodeFk : null, firstAssemblyPlantFk,showPlantAsOneRecord);
							}

							if (resourceType === estimateMainResourceType.Plant || resourceType === estimateMainResourceType.PlantDissolved) {
								estimateMainPlantAssemblyHandlerService.setPlantAssemblyResourcesTreeToContainerData(resourceTrees, selectedResource, serviceContainer, service, showPlantAsOneRecord);
							} else {
								setAssemblyResourcesTreeToContainerData(resourceTrees, subItemToAssign, null, selectedResource);
							}

							// Attach user defined price value to resoruce
							if (angular.isArray(data.UserDefinedcolsOfResource)) {
								// update merged resource id to UserDefinedcolsOfResource
								data.UserDefinedcolsOfResource.forEach(function (item) {
									var newId = oldNewResourceMapping[item.Pk3];
									if (newId && newId > 0) {
										item.Pk3 = newId;
										var UserDefinedcolsOfResourceEntity = data.UserDefinedcolsOfOldResources.find(e => e.Pk3 === newId);
										if (UserDefinedcolsOfResourceEntity) {
											item.Id = UserDefinedcolsOfResourceEntity.Id;
											item.Version = UserDefinedcolsOfResourceEntity.Version;
										}
									}
								});

								setUserDefinedColToResource(lineItem, resourceTrees, data.UserDefinedcolsOfResource);
							}


							// copy gc breakdown values from parent
							_.forEach(resourceTrees, function (item) {
								item.GcBreakdownTypeFk = gcBreakdownTypeFk;
								if (item && item.EstResources !== null) {
									let flatResList = [];
									cloudCommonGridService.flatten(item.EstResources, flatResList, 'EstResources');
									service.handleGcBreakdownType(lineItem, gcBreakdownTypeFk, flatResList);
								}

								if (item.EstResourceTypeFk === estimateMainResourceType.SubItem && item.EstAssemblyFk > 0 && item.EstHeaderAssemblyFk > 0) {
									$injector.get('estimateMainResourceDetailService').changeSubitemChildrenCode(item, serviceContainer.data.itemList);
								}
							});

							//Lastly calculate totals and validate sub items
							return calculateResolvedAssembliesAndValidateSubItemsCode(lineItem, selectedResource).then(function(){

								// Assign characteristics
								setResourceCharacteristics(resCharacteristics);

								// Process resources along with res-characteristics dynamic columns
								processResolvedItems(resourceTrees);

								estimateMainResourceProcessor.setDisabledChildrenReadOnly(service.getList());

								// Refresh views
								service.gridRefresh();

								clearOldNewResourceMapping();

								parentScope.isLoading = false;

								if (showPlantAsOneRecord && data.SavedResources) {
									angular.forEach(resourceTrees, function (item) {
										serviceContainer.data.doClearModifications(item, serviceContainer.data);
									});
									angular.forEach(data.SavedResources, function (item) {
										serviceContainer.data.doClearModifications(item, serviceContainer.data);
									});
									serviceContainer.data.doClearModifications(selectedResource, serviceContainer.data);
								}
								if (showPlantAsOneRecord && resourceType === estimateMainResourceType.Plant || resourceType === estimateMainResourceType.PlantDissolved){
									angular.forEach(resourceTrees, function (item) {
										serviceContainer.data.doClearModifications(item, serviceContainer.data);
									});
									serviceContainer.data.doClearModifications(selectedResource, serviceContainer.data);
								}
								estimateMainService.gridRefresh();

								return $q.when(true);
							});

						} else {
							// Refresh views
							let modTrackServ = $injector.get('platformDataServiceModificationTrackingExtension');
							modTrackServ.clearModificationsInRoot(estimateMainService);
							parentScope.isLoading = false;
							service.gridRefresh();
							estimateMainService.gridRefresh();
							return $q.resolve();
						}
					}, function(err){
						parentScope.isLoading = false;
						// eslint-disable-next-line no-console
						console.error(err);
						return $q.when(true);
					});
				};

				service.getAssemblyLookupSelectedItems = function getAssemblyLookupSelectedItems(entity, assemblySelectedItems) {
					if (!_.isEmpty(assemblySelectedItems) && _.size(assemblySelectedItems) > 1) {
						let assemblyIds = _.map(assemblySelectedItems, 'Id');
						let lineItem = estimateMainService.getSelected();
						let resourceTypeAssembly = 4;

						service.resolveResourcesAndAssign(lineItem, assemblyIds, resourceTypeAssembly);
					}
				};

				service.getPlantAssemblyLookupSelectedItems = function getPlantAssemblyLookupSelectedItems(entity, plantAssemblySelectedItems) {
					if (!_.isEmpty(plantAssemblySelectedItems) && _.size(plantAssemblySelectedItems) > 1) {
						let plantAssemblyDictionary = service.groupEntitiesByPlantFK(plantAssemblySelectedItems);
						let plantAssemblyIds = _.map(plantAssemblySelectedItems, 'Id');
						let lineItem = estimateMainService.getSelected();
						let resourceTypeAssembly = 3;

						// when system option is false only then
						if(!estimateMainService.getShowPlantAsOneRecordOption()) {
							return $injector.get('estimateMainResourceValidationService').validateEquipmentAssembly(plantAssemblySelectedItems, entity, null, false, false, false).then(function (response) {
								if (!response.valid) {
									// Remove matching code from dictionary and pass it to backend
									plantAssemblyDictionary = _.omit(plantAssemblyDictionary, response.matchingIds);
									plantAssemblyIds = plantAssemblyIds.filter(id => !response.matchingIds.includes(id));
								}

								if (_.isEmpty(plantAssemblyDictionary)) {
									$injector.get('platformDataServiceModificationTrackingExtension').clearModificationsInRoot(estimateMainService);
									return;
								}
								return service.resolveResourcesAndAssign(lineItem, plantAssemblyIds, resourceTypeAssembly, null, plantAssemblyDictionary);
							});
						} else {
							return service.resolveResourcesAndAssign(lineItem, plantAssemblyIds, resourceTypeAssembly, null, plantAssemblyDictionary);
						}
					}
				};

				service.getCostCodeLookupSelectedItems = function getCostCodeLookupSelectedItems(entity, costCodeSelectedItems) {
					if (!_.isEmpty(costCodeSelectedItems) && _.size(costCodeSelectedItems) > 1) {
						let mdcCostCodeIds = _.map(_.filter(costCodeSelectedItems, e => !e.IsOnlyProjectCostCode), 'OriginalId');
						let prjCostCodeIds = _.map(_.filter(costCodeSelectedItems, e => !!e.IsOnlyProjectCostCode), 'OriginalId');
						let lineItem = estimateMainService.getSelected();
						let resourceTypeCostCode = 1;

						service.resolveResourcesAndAssign(lineItem, mdcCostCodeIds, resourceTypeCostCode, prjCostCodeIds);
					}
				};

				service.getMaterialLookupSelectedItems = function getMaterialLookupSelectedItems(entity, materialSelectedItems) {
					if (!_.isEmpty(materialSelectedItems) && _.size(materialSelectedItems) > 1) {
						let materialIds = _.map(materialSelectedItems, 'Id');
						let assemblyItem = estimateMainService.getSelected();
						let resourceTypeMaterial = 2;
						materialLookupSelectedItems = materialSelectedItems;

						service.resolveResourcesAndAssign(assemblyItem, materialIds, resourceTypeMaterial);
					}
				};

				service.groupEntitiesByPlantFK= function groupEntitiesByPlantFK(entities) {
					// Initialize the dictionary directly
					const plantAssemblyDictionary = {};

					// Iterate over the entities once
					for (let i = 0; i < entities.length; i++) {
						const entity = entities[i];
						const entityId = entity.Id;

						// Initialize array for Plant Assembly key if it doesn't exist
						if (!plantAssemblyDictionary[entityId]) {
							plantAssemblyDictionary[entityId] = [];
						}

						// Push entity into the corresponding array
						plantAssemblyDictionary[entityId] = entity.PlantFk;
					}

					return plantAssemblyDictionary;
				}

				function isParentCompositeResource(resItem) {
					let item = service.getItemById(resItem.EstResourceFk) || {};
					if (item.EstAssemblyTypeFk) {
						return true;
					} else if (item.EstResourceFk) {
						return isParentCompositeResource(item);
					}
				}

				service.setIndirectCost = function setIndirectCost(resources, isIndirectCost) {
					angular.forEach(resources, function (res) {
						res.IsIndirectCost = res && res.EstRuleSourceFk ? res.IsIndirectCost : !!isIndirectCost;
						$injector.get('platformRuntimeDataService').readonly(res, [{
							field: 'IsIndirectCost',
							readonly: res.IsIndirectCost
						}]);
					});
				};

				let filters = [
					{
						key: 'estimate-main-resources-assembly-type-filter',
						fn: function (item, entity) { // item = assembly category
							if (entity.EstResourceTypeFk === estimateMainResourceType.Assembly && entity.EstAssemblyTypeFk) { // only assembly and composite assemblies
								let isTheSameAssemblyType = item.EstAssemblyTypeFk === entity.EstAssemblyTypeFk;
								if (isTheSameAssemblyType) {
									return true;
								}
								if (item.AssemblyCatChildren) {
									item.IsTemp = true; // Item is added only for reference, but not used in search filters
									let childAssemblyTypes =[];
									checkChildAssemblyCatType(item,entity,childAssemblyTypes);
									return childAssemblyTypes.length >= 1;
								}
								// Assembly type does not match
								return false;
							}
							// General assemblies : A
							return true;
						}
					},
					{
						key: 'estimate-main-resources-cost-type-filter',
						fn: function (item) {
							return item.MdcContextFk === estimateMainCommonService.getCompanyContextFk();
						}
					}
				];

				function checkChildAssemblyCatType(assemblyCatItem,entity,childAssemblyTypes){
					_.each(assemblyCatItem.AssemblyCatChildren, function (item) {
						let isTheSameAssemblyType = item.EstAssemblyTypeFk === entity.EstAssemblyTypeFk;
						if(isTheSameAssemblyType){
							childAssemblyTypes.push(isTheSameAssemblyType);
						}
						checkChildAssemblyCatType(item,entity,childAssemblyTypes);
					});
					return _.size(childAssemblyTypes);
				}

				service.registerFilters = function registerFilters() {
					basicsLookupdataLookupFilterService.registerFilter(filters);
				};

				service.unregisterFilters = function unregisterFilters() {
					basicsLookupdataLookupFilterService.unregisterFilter(filters);
				};

				service.takeOverCostTypeFromAssembly = function (mdcCostCodeFk, mdcMaterialFk, resourceItem) {
					if (mdcCostCodeFk && resourceItem) {
						basicsLookupdataLookupDescriptorService.loadItemByKey('costcode', mdcCostCodeFk).then(function (data) {
							if (data) {
								resourceItem.EstCostTypeFk = data.EstCostTypeFk;
							}
						});
					} else if (mdcMaterialFk && resourceItem) {
						let materialIdList = [mdcMaterialFk];
						estimateMainPrjMaterialLookupService.getBaseMaterials(materialIdList).then(function (data) {
							if (data && data.length === 1) {
								resourceItem.EstCostTypeFk = data[0].EstCostTypeFk;
							}
						});
					}
				};

				service.handlerStructure = function (entity, selectedItem) {
					if (entity && !entity.PrcStructureFk) {
						entity.PrcStructureFk = selectedItem ? selectedItem.StructureFk : entity.PrcStructureFk;
					}

					if (service.getList().length > 0) {
						$injector.get('estimateMainResourceDetailService').setResourcesBusinessPartnerName(entity, service.getList());
					} else {
						service.load().then(function () {
							$injector.get('estimateMainResourceDetailService').setResourcesBusinessPartnerName(entity, service.getList());
						});
					}
				};

				service.handlerPrcPackageAndStructure = function (entity, selectedItem) {
					if (entity && !entity.PrcStructureFk) {
						entity.PrcStructureFk = selectedItem ? selectedItem.StructureFk : entity.PrcStructureFk;
					}
				};

				let onLineItemChanged = new PlatformMessenger(); // estimate resource item is changed
				service.registerLineItemValueUpdate = function registerLineItemValueUpdate(func) {
					onLineItemChanged.register(func);
				};

				service.unregisterLineItemValueUpdate = function unregisterLineItemValueUpdate(func) {
					onLineItemChanged.unregister(func);
				};

				service.fireLineItemValueUpdate = function (col, item) {
					onLineItemChanged.fire(col, item);
				};

				let _gridId = null;
				service.setGridId = function setGridId(gridId) {
					_gridId = gridId;
				};

				service.getGridId = function getGridId() {
					return _gridId;
				};

				service.setReadOnlyService = function setReadOnlyService(readOnly) {
					isReadOnlyService = readOnly;
				};

				service.isReadonly = function isReadonly() {
					return isReadOnlyService;
				};

				service.showWarning = function showWarning(message, existingCodes) {
					let modalOptions = {
						headerTextKey: $translate.instant('estimate.main.aiWizard.warning'),
						bodyTextKey: $translate.instant(message, {existingCodes:existingCodes}),
						showOkButton: true,
						iconClass: 'ico-warning'
					};
					$injector.get('platformModalService').showDialog(modalOptions);
				}

				function getDynamicColumns() {
					return serviceContainer.data.dynamicColumns;
				}

				function getCharDefaults() {
					return serviceContainer.data.characteristicsDefaults;
				}

				function parseConfiguration(propertyConfig) {
					propertyConfig = angular.isString(propertyConfig) ? JSON.parse(propertyConfig) : angular.isArray(propertyConfig) ? propertyConfig : [];

					_.each(propertyConfig, function (config) {
						if (_.has(config, 'name')) {
							_.unset(config, 'name');
							_.unset(config, 'name$tr$');
							_.unset(config, 'name$tr$param$');
						}
					});

					return propertyConfig;
				}

				service.setDynamicColumnsLayoutToGrid = function setDynamicColumnsLayoutToGrid() {
					let mainViewService = $injector.get('mainViewService');
					let platformGridAPI = $injector.get('platformGridAPI');

					let gridId = 'bedd392f0e2a44c8a294df34b1f9ce44'; // Resource container grid Id
					let grid = platformGridAPI.grids.element('id', gridId);
					if (grid && grid.instance) {
						let cols = grid.columns.current; // platformGridAPI.columns.getColumns(gridId);
						let dynamicCols = _.filter(cols, function (col) {
							return (col.id.indexOf('ConfDetail') > -1 || col.id.indexOf('charactercolumn_') > -1 || col.id.indexOf('NotAssignedCostTotal') > -1);
						});
						if (dynamicCols.length === 0) {

							let allColumns = cols.concat(getDynamicColumns());

							let config = mainViewService.getViewConfig(gridId);

							if (config) {
								let propertyConfig = config.Propertyconfig || [];
								propertyConfig = parseConfiguration(propertyConfig);

								let mappedConfigIds = {};

								propertyConfig.forEach(function (el, i) {
									mappedConfigIds[el.id] = {
										'idx': i,
										'prop': el
									};
								});

								allColumns.forEach(function (col) {
									// eslint-disable-next-line no-prototype-builtins
									if (mappedConfigIds.hasOwnProperty((col.id))) {
										col.hidden = !mappedConfigIds[col.id].prop.hidden;
									}
								});
							}

							platformGridAPI.columns.configuration(gridId, allColumns);
							platformGridAPI.grids.resize(gridId);
						}
					}
				};

				service.getDataOriginal = getDataOriginal;
				service.handleUpdateDone = handleUpdateDone;
				service.setResourceCharacteristicPermission = setResourceCharacteristicPermission;

				service.getHasCostCodeCharac = function getHasCostCodeCharac(){
					return hasCostCodeCharacteristic;
				};

				service.setHasCostCodeCharac = function setHasCostCodeCharac(value) {
					hasCostCodeCharacteristic = value;
				};

				// get really Resource to replace
				service.getSelectedTargetReplacement = function getSelectedTargetReplacement() {
					let selectedResourceItem = service.getSelected();
					if (selectedResourceItem) {
						// find parent composite assembly or plant assembly if selected resource is a child
						let targetParentAssembly;
						if(selectedResourceItem.EstResourceFk){
							let resourceList = service.getList();
							let parent = _.find(resourceList, {Id: selectedResourceItem.EstResourceFk});
							while (parent){
								if(parent.EstResourceTypeFk === estimateMainResourceType.Assembly
									|| (selectedResourceItem.EstResourceTypeFk === estimateMainResourceType.SubItem && selectedResourceItem.EstAssemblyFk)
									|| parent.EstResourceTypeFk === estimateMainResourceType.Plant
									|| parent.EstResourceTypeFk === estimateMainResourceType.PlantDissolved){
									targetParentAssembly = parent;
								}
								parent = _.find(resourceList, {Id: parent.EstResourceFk});
							}
						}
						selectedResourceItem = targetParentAssembly || selectedResourceItem;
					}
					return selectedResourceItem;
				};

				return service;

				function setDataOriginal(readData) {
					let itemTree = readData.dtos || [];

					let itemListOriginal = [];
					serviceContainer.data.flatten(itemTree, itemListOriginal, serviceContainer.data.treePresOpt.childProp);
					estimateMainResourceImageProcessor.processItems(itemListOriginal);
					_.forEach(itemListOriginal, function (item) {
						item.parentJobFk = readData.parentJobFk;
					});

					let currentLineItem = estimateMainService.getSelected();
					if(currentLineItem){
						currentLineItem.parentJobFk = readData.parentJobFk;
					}

					serviceContainer.data.itemListOriginal = angular.copy(itemListOriginal);
				}

				function setLookupData(itemTree) {
					itemTree = itemTree || [];

					let itemListOriginal = [];
					serviceContainer.data.flatten(itemTree, itemListOriginal, serviceContainer.data.treePresOpt.childProp);

					let dataItems = angular.copy(itemListOriginal);
					let lookUpData = {CostCodes: [], Materials: [], Assemblies: []};

					_.forEach(dataItems, function (item) {
						if (item.EstResourceTypeFk === estimateMainResourceType.CostCode && item.MdcCostCodeFk > 0) { // CostCode
							lookUpData.CostCodes.push({
								Id: item.MdcCostCodeFk,
								Code: item.Code,
								DescriptionInfo: item.DescriptionInfo
							});
						}
						if (item.EstResourceTypeFk === estimateMainResourceType.Material && item.MdcMaterialFk > 0) { // Material
							lookUpData.Materials.push({
								Id: item.MdcMaterialFk,
								Code: item.Code,
								DescriptionInfo: item.DescriptionInfo
							});
						}
						if (item.EstResourceTypeFk === estimateMainResourceType.Assembly && item.EstAssemblyFk > 0) { // Assembly Composite
							lookUpData.Assemblies.push({
								Id: item.EstAssemblyFk,
								Code: item.Code,
								DescriptionInfo: item.DescriptionInfo
							});
						}
					});

					// if data is already set in dto then
					// Fill data to lookup Cache
					basicsLookupdataLookupDescriptorService.updateData('estmdccostcodes', lookUpData.CostCodes);
					// For Estimate
					basicsLookupdataLookupDescriptorService.updateData('prjCostCodesByJob', lookUpData.CostCodes);

					basicsLookupdataLookupDescriptorService.updateData('MaterialRecord', lookUpData.Materials);
					basicsLookupdataLookupDescriptorService.updateData('estassemblyfk', lookUpData.Assemblies);

					// else
					// we make async call and return promise to children
				}

				function getDataOriginal() {
					return angular.copy(serviceContainer.data.itemListOriginal);
				}

				function processResolvedItems(resources) {
					let platformDataServiceDataProcessorExtension = $injector.get('platformDataServiceDataProcessorExtension');
					_.forEach(resources, function (item) {
						platformDataServiceDataProcessorExtension.doProcessItem(item, serviceContainer.data);
						if (item.HasChildren) {
							processResolvedItems(item.EstResources);
						}

						// set the search materials to resouce
						if (item.EstResourceTypeFk === estimateMainResourceType.Material && materialLookupSelectedItems) {
							let material = _.find(materialLookupSelectedItems, {'Id': item.MdcMaterialFk});
							if (material) {
								estimateMainCommonService.setSelectedCodeItem(null, item, true, material);
							}
						}
					});

					materialLookupSelectedItems = null;
				}

				function isPlantTypeResource(resourceType) {
					const types = [
						estimateMainResourceType.Plant,
						estimateMainResourceType.PlantDissolved,
						estimateMainResourceType.EquipmentAssembly
					];
					return types.includes(resourceType);
				}

				// Resolve assembly function
				function getAssemblyResourcesRequest(customPostData) {
					let resType = $injector.get('estimateMainResourceType');
					let selectedLineItem = estimateMainService.getSelected();
					let isNewLineItem = selectedLineItem.Version === 0;
					let selectedResourceItem = service.getSelected();
					let allItems = service.getList();
					let unsavedResources = _.filter(allItems, item => item.Id !== selectedResourceItem.Id && item.Version === 0);

					let postData = {
						HeaderFk: estimateMainService.getSelectedEstHeaderId(),
						// AssemblyIds: assemblyIds, //Set customPostData to send assemblyIds
						SectionId: 33,
						ProjectId: estimateMainService.getSelectedProjectId(),
						isLineItemResource: true,
						IsCopyByDragDropSearchWizard: true,
						EstLineItem: isNewLineItem ? selectedLineItem : null,
						UnsavedResourceTree: unsavedResources
					};

					angular.extend(postData, customPostData);

					let showPlantAsOneRecord = estimateMainService.getShowPlantAsOneRecordOption();
					let shouldFetchDuplicateCodes = showPlantAsOneRecord && isPlantTypeResource(postData.ResourceType);

					let duplicateCodePromise = shouldFetchDuplicateCodes
						? $http.post(globals.webApiBaseUrl + 'estimate/main/resource/getduplicateeacodes', postData)
						: $q.resolve({ data: [] });

					// Return the promise chain
					return duplicateCodePromise.then(() => {
						let asyncMarker = $injector.get('platformDataValidationService').registerAsyncCall(
							selectedResourceItem,
							selectedResourceItem.Code,
							"Code",
							service
						);

						asyncMarker.myPromise = $http.post(
							globals.webApiBaseUrl + 'estimate/main/resource/getresourcestolineitem',
							postData
						).then(response => {
							let resources = response.data.resources;

							if (resources && resources.length) {
								processResolvedItems(resources);

								let itemList = service.getList();
								let selectedItem = service.getSelected();

								if (selectedItem !== null && selectedItem !== undefined) {
									let filteredList = _.filter(itemList, { 'EstResourceFk': selectedItem.EstResourceFk });
									let maxItem = _.maxBy(filteredList, 'Sorting');
									let newSortingNumber = selectedItem.Sorting === maxItem.Sorting
										? selectedItem.Sorting
										: maxItem.Sorting + 1;

									estimateMainGenerateSortingService.assignSorting(resources, newSortingNumber.toString(), true, true);
								}
							}

							if (response.data.EstLineItem && showPlantAsOneRecord) {
								estimateMainService.addList([response.data.EstLineItem]);
								service.fireListLoaded();
							}

							let estimateMainResourceValidationService = $injector.get('estimateMainResourceValidationService');
							let result = {apply: true, valid: true};
							$injector.get('platformDataValidationService').finishAsyncValidation(result, selectedResourceItem, selectedResourceItem.Code, 'Code', asyncMarker, estimateMainResourceValidationService, service);

							return response.data;
						});

						return asyncMarker.myPromise;
					});
				}

				// Resolve assembly function
				function setAssemblyResourcesTreeNodeInfo(resource, items, subItemToAssign) {

					let selectedResourceLevel = resource && resource.nodeInfo && resource.nodeInfo.level ? resource.nodeInfo.level : 0;
					let iterateResources = function iterateResources(items, level) {
						_.forEach(items, function (item) {
							let collapsed = level > 0;
							item.nodeInfo = {collapsed: collapsed, level: level, children: item.HasChildren};

							if (item.HasChildren) {
								iterateResources(item.EstResources, level + 1);
							}
						});
					};

					// move
					if (subItemToAssign) {
						subItemToAssign.nodeInfo.collapsed = false;
						subItemToAssign.nodeInfo.children = true;
						selectedResourceLevel = selectedResourceLevel + 1;
					}

					// revert step
					if (selectedResourceLevel && resource && resource.EstResourceTypeFk !== estimateMainResourceType.SubItem) {
						selectedResourceLevel = selectedResourceLevel - 1;
					}

					iterateResources(items, selectedResourceLevel);
				}


				function processPlantAssemblyResourcesTreeNodeInfo(resource, items, subItemToAssign) {
					let subItemResourceLevel = subItemToAssign && subItemToAssign.nodeInfo && subItemToAssign.nodeInfo.level ? subItemToAssign.nodeInfo.level : 0;
					let selectedResourceLevel = 0;
					let iterateResources = function iterateResources(items, level) {
						_.forEach(items, function (item) {
							let collapsed = level > 0;
							item.nodeInfo = {collapsed: collapsed, level: level, children: item.HasChildren};
							if (item.HasChildren) {
								iterateResources(item.EstResources, level + 1);
							}
						});
					};
					if (subItemToAssign && (subItemToAssign.EstResourceTypeFk === estimateMainResourceType.SubItem || subItemToAssign.EstResourceTypeFk === estimateMainResourceType.Plant || subItemToAssign.EstResourceTypeFk === estimateMainResourceType.PlantDissolved)) {
						subItemToAssign.nodeInfo.collapsed = false;
						subItemToAssign.nodeInfo.children = true;
						selectedResourceLevel = subItemResourceLevel + 1;
					}
					iterateResources(items, selectedResourceLevel);
				}


				// Resolve assembly function
				function setAssemblyResourcesTreeToContainerData(items, subItemToAssign, itemLevelToAssign, selectResource) {
					let res = selectResource;

					_.forEach(items, function (item) {

						if (res && res.Id === item.Id) { // resolve
							// we do not add this item to data.itemList, because by default it already was added.
							serviceContainer.data.markItemAsModified(item, serviceContainer.data);
						} else {
							// add item to save
							serviceContainer.data.itemList.push(item);
							serviceContainer.data.addEntityToCache(item, serviceContainer.data);
							serviceContainer.data.markItemAsModified(item, serviceContainer.data);

							// add parent resource to itemTree
							if (!_.isNumber(item.EstResourceFk)) {

								if (subItemToAssign) { // move
									item.EstResourceFk = subItemToAssign.Id;
									subItemToAssign.HasChildren = true;
									subItemToAssign.EstResources.push(item);
									serviceContainer.data.markItemAsModified(item, serviceContainer.data);

								} else if (itemLevelToAssign) { // copy
									let parent = _.find(service.getList(), {Id: itemLevelToAssign.EstResourceFk});
									if (parent) {
										// let index = _.findIndex(parent.EstResources, { Id: itemLevelToAssign.Id });
										// parent.EstResources.splice(index, 0, item);
										parent.EstResources.push(item);
									} else {
										// we check index from the tree list
										// let indexTree = _.findIndex(service.getTree(), { Id: itemLevelToAssign.Id });
										// serviceContainer.data.itemTree.splice(indexTree, 0, item);
										serviceContainer.data.itemTree.push(item);
									}

								} else {
									serviceContainer.data.itemTree.push(item);
								}
							}
						}

						if (item.HasChildren) {
							setAssemblyResourcesTreeToContainerData(item.EstResources);
						}
					});
				}

				// Resolve assembly function //resDefault
				function mergeCurrentResource(resource, items, mainResourceId, resTypeId, prjCostCodeFk, plantFK) {
					// items : Array of treeItems
					if (resource) {
						// Pick the first assembly and merged it to the selected resource
						let resDefaultFilter = {};
						switch (resTypeId) {
							case estimateMainResourceType.CostCode: // CostCode
								if(prjCostCodeFk) {
									resDefaultFilter.ProjectCostCodeFk = prjCostCodeFk;
								}else {
									resDefaultFilter.MdcCostCodeFk = mainResourceId;
								}
								break;
							case estimateMainResourceType.Material: // Material
								resDefaultFilter.MdcMaterialFk = mainResourceId;
								break;
							case estimateMainResourceType.Plant: // Plant Assembly
								resDefaultFilter.EstAssemblyFk = mainResourceId;
								resDefaultFilter.EtmPlantFk = plantFK;
							case estimateMainResourceType.Assembly: // Assembly
								resDefaultFilter.EstAssemblyFk = mainResourceId;
								break;
						}

						let resToUpdate = _.find(items, resDefaultFilter);
						if (resToUpdate) {
							// Keep the id and relation id
							oldNewResourceMapping[resToUpdate.Id] = resource.Id;

								resToUpdate.Id = resource.Id;

							if (resTypeId === estimateMainResourceType.Plant || resTypeId === estimateMainResourceType.PlantDissolved) {
								// to identify the old EA parent
								resToUpdate.OldEstResourceFk = resource.EstResourceFk;
							}
							else{
								resToUpdate.EstResourceFk = resource.EstResourceFk;
							}

							resToUpdate.Version = resource.Version;

							if (resToUpdate.HasChildren) {
								_.forEach(resToUpdate.EstResources, function (rUpdate) {
									rUpdate.EstResourceFk = resource.Id;
								});
							}

							// region  old reset resource
							resource.Code = resToUpdate.Code;
							resource.DescriptionInfo = resToUpdate.DescriptionInfo;
							resource.DescriptionInfo1 = resToUpdate.DescriptionInfo1;
							resource.CostUnit = resource.CostUnitOriginal = resToUpdate.CostUnit;
							resource.IsCost = resToUpdate.IsCost;
							resource.IsBudget = resToUpdate.IsBudget;
							resource.HoursUnit = resToUpdate.HoursUnit;
							resource.HourFactor = resToUpdate.HourFactor;
							// resource.QuantityOriginal = resource.Quantity;
							// resource.IsRate = resToUpdate.IsRate;
							resource.BasCurrencyFk = resToUpdate.BasCurrencyFk;
							resource.BasUomFk = resToUpdate.BasUomFk;
							resource.DayWorkRateUnit = resToUpdate.DayWorkRateUnit;
							resource.IsIndirectCost = resToUpdate.IsIndirectCost;
							resource.IsInformation = resToUpdate.IsInformation;
							resource.nodeInfo = resToUpdate.nodeInfo;

							switch (resTypeId) {
								case estimateMainResourceType.CostCode: // CostCode
									resource.MdcCostCodeFk = resToUpdate.MdcCostCodeFk;
									resource.ProjectCostCodeFk = resToUpdate.ProjectCostCodeFk;
									break;
								case estimateMainResourceType.Material: // Material
									resource.MdcMaterialFk = resToUpdate.MdcMaterialFk;
									break;
								case estimateMainResourceType.Plant: // Plant Assembly
								case estimateMainResourceType.Assembly: // Assembly
									resource.EstAssemblyFk = resToUpdate.EstAssemblyFk;
									resource.EstHeaderAssemblyFk = resToUpdate.EstHeaderAssemblyFk;
									resource.BasCurrencyFk = resToUpdate.BasCurrencyFk;
									resource.EstAssemblyTypeFk = resToUpdate.EstAssemblyTypeFk;
									resource.EstResourceTypeFk = resToUpdate.EstResourceTypeFk;
									resource.EstResourceTypeFkExtend = resToUpdate.EstResourceTypeFkExtend;
									resource.EstCostTypeFk = resToUpdate.EstCostTypeFk;

									resource.MdcCostCodeFk = resToUpdate.MdcCostCodeFk;
									resource.MdcMaterialFk = resToUpdate.MdcMaterialFk;

									resource.HasChildren = resToUpdate.HasChildren;
									resource.EstResources = resToUpdate.EstResources;

									resource.QuantityFactor1 = resToUpdate.QuantityFactor1;
									resource.QuantityFactor2 = resToUpdate.QuantityFactor2;
									resource.QuantityFactorDetail1 = resource.QuantityFactor1;
									resource.QuantityFactorDetail2 = resource.QuantityFactor2;
									resource.QuantityFactor3 = resToUpdate.QuantityFactor3;
									resource.QuantityFactor4 = resToUpdate.QuantityFactor4;
									resource.CostFactor1 = resToUpdate.CostFactor1;
									resource.CostFactor2 = resToUpdate.CostFactor2;
									resource.CostFactorDetail1 = resource.CostFactor1;
									resource.CostFactorDetail2 = resource.CostFactor2;
									resource.Sorting = resToUpdate.Sorting;
									resource.EtmPlantFk = resToUpdate.EtmPlantFk;
									break;
							}
							// endregion

							// update tree item
							angular.extend(resource, resToUpdate);
							// Process image
							estimateMainResourceImageProcessor.processItem(resource);

						}
					}
				}

				// Set Resource Characteristics Data To resource characteristic container and assign to dynamic columns in resource container
				function setResourceCharacteristics(resCharacteristics) {
					// Characteristics
					// Group chars by resources
					let resObjectGroups = _.groupBy(resCharacteristics, 'ObjectFk');
					let estimateMainResourceCharacteristicsService = $injector.get('estimateMainResourceCharacteristicsService');
					_.forEach(resObjectGroups, function (chars, entityId) {
						let entity = service.getItemById(parseInt(entityId));
						if(oldNewResourceMapping[parseInt(entityId)] && !entity){
							entity = service.getItemById(parseInt(oldNewResourceMapping[parseInt(entityId)]));
							_.forEach(chars, function(charEntity){
								charEntity.ObjectFk = parseInt(oldNewResourceMapping[parseInt(entityId)]);
							});
						}
						estimateMainResourceCharacteristicsService.assignCharsToEntity(chars, entity);
					});
				}

				function setResourceCharacteristicPermission(resource) {
					let platformPermissionService = $injector.get('platformPermissionService');

					// Permission to resource character container
					let lineItem = estimateMainService.getSelected();
					let permissionReadFlag = platformPermissionService.permissionsFromString('r');
					let resCharacterContainerUuId = '9201bfe4297c4eb9bdf2bbca7d798148';

					if (lineItem.EstLineItemFk || resource.EstRuleSourceFk) {
						// Line item reference resources
						platformPermissionService.restrict(resCharacterContainerUuId, permissionReadFlag);
						return;
					}

					if (resource.__rt$data && resource.__rt$data.readonly && resource.__rt$data.readonly.length > 0) {
						// Resource Characteristics as readonly
						let hasCharsReadOnly = _.find(resource.__rt$data.readonly, function (item) {
							return item.field.indexOf('charactercolumn_') > -1;
						});
						let isResourceSubCompositeItem = resource.cssClass === 'row-readonly-background row-readonly-background-composite';
						if (hasCharsReadOnly || isResourceSubCompositeItem) {
							platformPermissionService.restrict(resCharacterContainerUuId, permissionReadFlag);
							return;
						} else {
							platformPermissionService.restrict(resCharacterContainerUuId);
						}
					}

					let resourceGridId = service.getGridId();
					// If it does not have write permission, then
					if (platformPermissionService.hasRead(resourceGridId) === true && platformPermissionService.hasWrite(resourceGridId) === true) {
						// If it reaches here, then set resource characteristics to read-write
						platformPermissionService.restrict(resCharacterContainerUuId, false);
					}
				}

				// Resolve assembly function
				function clearValidationFromCurrentResource(resource) {
					if (resource) {
						let estimateMainResourceValidationService = $injector.get('estimateMainResourceValidationService');

						$injector.get('platformRuntimeDataService').applyValidationResult(true, resource, 'Code');
						$injector.get('platformDataValidationService').removeFromErrorList(resource, 'Code', estimateMainResourceValidationService, service);
					}
				}

				// Resolve assembly function
				function calculateResolvedAssembliesAndValidateSubItemsCode(lineItem, selectedResource) {
					// calculate totals
					let resourceList = service.getList();

					if (selectedResource) { // This can ben null. (e.g. Create new line item, or remove all resources previously)
						if (selectedResource.IsDisabled || selectedResource.IsDisabledPrc) {
							estimateMainCommonService.calculateResource(selectedResource, lineItem, resourceList);
						}
					}

					// Reset cost unit for sub items and omit re-calculated cost unit value
					if (selectedResource) {
						selectedResource.CostUnitOriginal = selectedResource.CostUnit;
					}

					return estimateMainCommonService.calculateLineItemAndResources(lineItem, resourceList);
				}

				function calculateCurrencies(item) {

					let basMultiCurrCommService = $injector.get('basicsMultiCurrencyCommonService');

					basMultiCurrCommService.calculateMultiCurrencies(item);
				}

				function setNewResourceCurrency(item) {

					let basMultiCurrCommService = $injector.get('basicsMultiCurrencyCommonService');

					basMultiCurrCommService.setResourceCurrency(item);

				}

				function setChildResourceDisabled(resItem) {
					if(resItem.Version === 0 && resItem.EstResourceFk && resItem.IsDisabled ) {
						let fields = [];
						fields.push({field: 'IsDisabled', readonly: true});
						$injector.get('platformRuntimeDataService').readonly(resItem, fields);
					}
				}

				function doSetShortKeyReadOnly(resItem, service) {
					var result = estimateMainResourceProcessor.doSetShortKeyReadOnly(resItem, service);
				}

				function setResourceCurrencies(items) {

					let basMultiCurrCommService = $injector.get('basicsMultiCurrencyCommonService');

					angular.forEach(items, function (res) {
						basMultiCurrCommService.setResourceCurrency(res);

						if (res.EstResources !== null && res.EstResources.length > 0) {
							setResourceCurrencies(res.EstResources);
						}

					});
				}

				function mergeResources(localList, remoteList) {
					const mergedList = [];
					const processedIds = new Set();
					const mapRemote = new Map(remoteList.map(item => [item.Id, item]));
					for (const itemLocal of localList) {
						const idLocal = itemLocal.Id;
						if (mapRemote.has(idLocal)) {
							//merge item
							angular.extend(itemLocal, mapRemote.get(idLocal));
							mergedList.push(itemLocal);
							processedIds.add(idLocal);
						}
					}
					for (const itemRemote of remoteList) {
						if (!processedIds.has(itemRemote.Id)) {
							mergedList.push(itemRemote);
						}
					}
					return mergedList;
				}

				function updateResourceVersion(itemListResponse) {
					let updateTree = function updateTree(list) {
						_.forEach(list, function (oldItem) {
							let updatedItem = _.find(itemListResponse, {Id: oldItem.Id});
							if (updatedItem) {
								oldItem.Version = updatedItem.Version;
							}
							if (oldItem.HasChildren) {
								updateTree(oldItem.EstResources);
							}
						});
					};

					updateTree(serviceContainer.data.itemTree);
				}

				function handleUpdateDone(data) {
					const resourceRemote = angular.copy(_.map(data, 'EstResource'));
					updateResourceVersion(resourceRemote);
					//refresh resource container
					serviceContainer.data.markItemAsModified(data, serviceContainer.data);

					service.fireListLoaded();

					//set resource original
					let itemListOriginal = [];
					serviceContainer.data.flatten(serviceContainer.data.itemTree, itemListOriginal, serviceContainer.data.treePresOpt.childProp);
					estimateMainResourceImageProcessor.processItems(itemListOriginal);
					serviceContainer.data.itemListOriginal = angular.copy(itemListOriginal);
				}

				function setUserDefinedColToResource(lineItem, resourceTrees, newUserDefinedCols){
					if(angular.isArray(newUserDefinedCols)){
						$injector.get('estimateMainResourceDynamicUserDefinedColumnService').resolveResourcesFromAssembly(lineItem, resourceTrees, newUserDefinedCols);
						// TODO: will refresh later
						// service.gridRefresh();
					}
				}

				function clearOldNewResourceMapping(){
					oldNewResourceMapping = {};
				}
			}]);


})(angular);


