/**
 * $Id$
 * Copyright (c) RIB Software SE
 */

(function (angular) {
	/* global _ */
	'use strict';
	let moduleName = 'estimate.main';

	/**
	 * @ngdoc service
	 * @name estimateMainResourceImageProcessor
	 * @function
	 *
	 * @description
	 * The estimateMainResourceImageProcessor adds images according to resource type.
	 */
	angular.module(moduleName).factory('estimateMainResourceImageProcessor', ['$injector', function ($injector) {

		let service = {};

		service.processItem = function processItem(resItem) {

			if (resItem) {

				let imageMap = { // EstResourceTypeFk
					1: 'ico-res-type-c',
					2: 'ico-res-type-m',
					3: 'ico-res-type-p',
					4: 'ico-res-type-a',
					5: 'ico-res-type-s',
					6: 'ico-res-type-p',
					7: 'ico-res-type-t',
					8: 'ico-res-type-i',
					10:'ico-res-type-r',
					11:'ico-res-type-ea',
					12:'ico-res-type-pd'
				};

				let estimateMainResourceType = $injector.get('estimateMainResourceType');
				// special case: sub item with assembly reference (generated by resolving an assembly)
				if (resItem.EstResourceTypeFk === estimateMainResourceType.SubItem && resItem.EstAssemblyFk !== null) {
					resItem.image = 'ico-res-type-as';
				} else {
					resItem.image = imageMap[resItem.EstResourceTypeFk];
				}

				// If any rule fk has not null value append -r to image path
				if (_.isNumber(resItem.EstRuleSourceFk) && resItem.EstRuleSourceFk > 0) {
					resItem.image += '-r';
				}
			}
		};

		service.processItems = function processItems(items) {
			angular.forEach(items, function (item) {
				service.processItem(item);
			});
		};

		return service;

	}]);
})(angular);
