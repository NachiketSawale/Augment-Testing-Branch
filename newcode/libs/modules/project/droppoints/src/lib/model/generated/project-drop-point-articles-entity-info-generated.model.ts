/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptModuleInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ProjectDropPointArticlesDataService } from '../../services/data/project-drop-point-articles-data.service';
import { ProjectDropPointArticlesValidationService } from '../../services/validation/project-drop-point-articles-validation.service';
import { BasicsSharedLookupOverloadProvider } from '@libs/basics/shared';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IProjectDropPointArticlesEntity, PROJECT_DROP_POINTS_LOOKUP_PROVIDER_TOKEN } from '@libs/project/interfaces';
import { RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const projectDropPointArticlesEntityInfoGenerated = <IEntityInfo<IProjectDropPointArticlesEntity>>{
	grid: {
		title: {
			text: 'Drop Point Articles',
			key: 'project.droppoints.dropPointsDropPointArticlesList'
		}
	},
	form: {
		title: {
			text: 'Drop Point Articles',
			key: 'project.droppoints.dropPointsDropPointArticlesDetail'
		},
		containerUuid: 'eea4f9c32c8b4560b09f926350aa28c8'
	},
	dataService: (ctx) => ctx.injector.get(ProjectDropPointArticlesDataService),
	validationService: (ctx) => ctx.injector.get(ProjectDropPointArticlesValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Project.DropPoints',
		typeName: 'DropPointArticlesDto'
	},
	permissionUuid: '0b2fbc87a2c644a8b84c1fac7174b06b',
	layoutConfiguration: async (ctx) => {
		const projectDropPointsLookupProvider = await ctx.lazyInjector.inject(PROJECT_DROP_POINTS_LOOKUP_PROVIDER_TOKEN);
		const resourceEquipmentLookupProvider = await ctx.lazyInjector.inject(RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IProjectDropPointArticlesEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'DropPointFk',
						'Code',
						'PlantFk',
						'MdcMaterialFk',
						//'ProductFk',
						'Quantity',
						'Comment',
					]
				},
			],
			overloads: {
				DropPointFk: projectDropPointsLookupProvider.provideDropPointLookupOverload(),
				PlantFk: resourceEquipmentLookupProvider.provideEquipmentPlantLookupOverload(),
				MdcMaterialFk: BasicsSharedLookupOverloadProvider.provideMaterialLookupOverload(true)
			},
			labels: {
				...prefixAllTranslationKeys('project.droppoints.', {
					DropPointFk: { key: 'entityDropPoint' },
					Code: { key: 'entityCode' },
					PlantFk: { key: 'entityPlant' },
					MdcMaterialFk: { key: 'entityMdcMaterial' },
					ProductFk: { key: 'entityProduct' },
					Quantity: { key: 'entityQuantity' },
					Comment: { key: 'entityComment' }
				}),
			 }
		};
	}
};