/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptDataServiceGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { LogisticActionTargetUpdate } from '../../../model/logistic-action-target-update.class';
import { ILogisticActionTargetEntity } from '@libs/logistic/interfaces';
import {
	DataServiceFlatRoot,
	IDataServiceEndPointOptions,
	IDataServiceOptions,
	IDataServiceRoleOptions,
	ServiceRole
} from '@libs/platform/data-access';

export class LogisticActionTargetDataGeneratedService extends DataServiceFlatRoot<ILogisticActionTargetEntity,LogisticActionTargetUpdate> {
	public constructor(){
		const options: IDataServiceOptions<ILogisticActionTargetEntity> = {
			apiUrl: 'logistic/action/target',
			readInfo: <IDataServiceEndPointOptions>{
				endPoint: 'filtered',
				usePost: true
			},
			deleteInfo: <IDataServiceEndPointOptions>{
				endPoint: 'multidelete'
			},
			roleInfo: <IDataServiceRoleOptions<ILogisticActionTargetEntity>>{
				role: ServiceRole.Root,
				itemName: 'ActionTarget'
			},
			entityActions: { createSupported: false, deleteSupported: false },
			//processors: [new EntityArrayProcessor<ILogisticActionTargetEntity>(['SubResources'])]
		};
		super(options);
	}
	public override createUpdateEntity(modified: ILogisticActionTargetEntity | null): LogisticActionTargetUpdate {
		const complete = new LogisticActionTargetUpdate();
		if (modified !== null) {
			complete.TemplateId = modified.Id;
			complete.Templates = [modified];
		}

		return complete;
	}
	public override getModificationsFromUpdate(complete: LogisticActionTargetUpdate): ILogisticActionTargetEntity[] {
		if (complete.Templates === null) {
			return complete.Templates = [];
		} else {
			return complete.Templates;
		}
	}
}