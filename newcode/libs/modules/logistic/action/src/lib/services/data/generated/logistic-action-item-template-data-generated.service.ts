/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptDataServiceGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { LogisticActionItemTemplateUpdate } from '../../../model/logistic-action-item-template-update.class';
import { LogisticActionTargetUpdate } from '../../../model/logistic-action-target-update.class';
import { LogisticActionTargetDataService } from '../logistic-action-target-data.service';
import { inject } from '@angular/core';
import { ILogisticActionItemTemplateEntity, ILogisticActionTargetEntity } from '@libs/logistic/interfaces';
import {
	DataServiceFlatNode,
	EntityArrayProcessor,
	IDataServiceEndPointOptions,
	IDataServiceOptions,
	IDataServiceRoleOptions,
	ServiceRole
} from '@libs/platform/data-access';
import { IIdentificationData } from '@libs/platform/common';

export class LogisticActionItemTemplateDataGeneratedService extends DataServiceFlatNode<ILogisticActionItemTemplateEntity,LogisticActionItemTemplateUpdate,ILogisticActionTargetEntity,LogisticActionTargetUpdate> {
	public constructor(){
		const options: IDataServiceOptions<ILogisticActionItemTemplateEntity> = {
			apiUrl: 'logistic/action/item',
			readInfo: <IDataServiceEndPointOptions>{
				endPoint: 'listbyactiontarget',
				usePost: true,
				prepareParam: ident => {
					return { PKey1: ident.pKey1 };
				}
			},
			createInfo: <IDataServiceEndPointOptions>{
				prepareParam: (ident: IIdentificationData) => {
					return {
						PKey1: ident.pKey1,
					};
				}
			},
			deleteInfo: <IDataServiceEndPointOptions>{
				endPoint: 'multidelete',
			},

			roleInfo: <IDataServiceRoleOptions<ILogisticActionItemTemplateEntity>>{
				role: ServiceRole.Node,
				itemName: 'ActionItemTemplates',
				parent: inject(LogisticActionTargetDataService)
			},
			processors: [new EntityArrayProcessor<ILogisticActionItemTemplateEntity>(['SubResources'])]
		};
		super(options);
	}
	public override createUpdateEntity(modified: ILogisticActionItemTemplateEntity | null): LogisticActionItemTemplateUpdate {
		const complete = new LogisticActionItemTemplateUpdate();
		if (modified !== null) {
			complete.MainItemId = modified.Id;
			complete.ActionItemTemplates = modified;
		}
		return complete;
	}

	public override registerByMethod(): boolean {
		return true;
	}

	public override registerNodeModificationsToParentUpdate(complete: LogisticActionTargetUpdate, modified: LogisticActionItemTemplateUpdate[], deleted: ILogisticActionItemTemplateEntity[]) {
		if (modified && modified.length > 0) {
			complete.ActionItemTemplatesToSave = modified;
		}
		if (deleted && deleted.length > 0) {
			complete.ActionItemTemplatesToDelete = deleted;
		}
	}

	public override getSavedEntitiesFromUpdate(complete: LogisticActionTargetUpdate): ILogisticActionItemTemplateEntity[] {
		if (complete && complete.ActionItemTemplatesToSave) {
			return complete.ActionItemTemplatesToSave.flatMap(e => e.ActionItemTemplates ? e.ActionItemTemplates : []);
		} else {
			return [];
		}
	}

	public override getModificationsFromUpdate(complete: LogisticActionItemTemplateUpdate): ILogisticActionItemTemplateEntity[] {
		if (complete.ActionItemTemplates === null) {
			return [];
		}

		return [complete.ActionItemTemplates];
	}

	public override isParentFn(parentKey: ILogisticActionTargetEntity, entity: ILogisticActionItemTemplateEntity): boolean {
		return entity.ActionTargetFk === parentKey.Id;
	}



}