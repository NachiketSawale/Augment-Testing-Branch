/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptModuleInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { LogisticActionItemTemplateDataService } from '../../services/data/logistic-action-item-template-data.service';
import { LogisticActionItemTemplateValidationService } from '../../services/validation/logistic-action-item-template-validation.service';
import { ILogisticActionItemTemplateEntity } from '@libs/logistic/interfaces';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const logisticActionItemTemplateEntityInfoGenerated = <IEntityInfo<ILogisticActionItemTemplateEntity>>{
	grid: {
		title: {
			text: 'Action Item Templates',
			key: 'logistic.action.actionItemTemplatesListTitle'
		}
	},
	form: {
		title: {
			text: 'Action Item Templates Details',
			key: 'logistic.action.actionItemTemplatesDetailTitle'
		},
		containerUuid: 'c31f04d209cb40d9825f68cbfe09daaa'
	},
	dataService: (ctx) => ctx.injector.get(LogisticActionItemTemplateDataService),
	validationService: (ctx) => ctx.injector.get(LogisticActionItemTemplateValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Logistic.Action',
		typeName: 'ActionItemTemplateDto'
	},
	permissionUuid: '3172c5da049348609d8e54163f09e473',
	layoutConfiguration: async (ctx) => {
		return <ILayoutConfiguration<ILogisticActionItemTemplateEntity>>{
			groups: [
				{
					gid: 'baseGroup',
					attributes: [
						'RecordNo',
						'DescriptionInfo',
						'LongDescriptionInfo',
						'Url',
						'IsLive',
						'HasDate',
						'HasUrl',
						'HasPrjDoc',
						'HasPlantCert',
						'HasBusinessPartner',
						'HasPrcContract',
						'HasClerk',
					]
				},
			],
			overloads: {},
			labels: {
				...prefixAllTranslationKeys('logistic.action.', {
					RecordNo: { key: 'entityRecordNo' },
					LongDescriptionInfo: { key: 'entityLongDescriptionInfo' },
					Url: { key: 'entityHasUrl' },
					HasDate: { key: 'entityHasDate' },
					HasUrl: { key: 'entityHasUrl' },
					HasPrjDoc: { key: 'entityHasPrjDoc' },
					HasPlantCert: { key: 'entityHasPlantCert' },
					HasBusinessPartner: { key: 'entityHasBusinessPartner' },
					HasPrcContract: { key: 'entityHasPrcContract' },
					HasClerk: { key: 'entityHasClerk' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					DescriptionInfo: {key: 'entityDescription'},
					IsLive: { key: 'entityIsLive' },
				}),
			 }
		};
	}
};