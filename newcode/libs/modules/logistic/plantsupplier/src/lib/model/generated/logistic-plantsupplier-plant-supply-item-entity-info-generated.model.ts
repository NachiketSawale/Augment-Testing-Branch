/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptModuleInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { LogisticPlantsupplierPlantSupplyItemDataService } from '../../services/data/logistic-plantsupplier-plant-supply-item-data.service';
import { LogisticPlantsupplierPlantSupplyItemValidationService } from '../../services/validation/logistic-plantsupplier-plant-supply-item-validation.service';
import { BasicsSharedCustomizeLookupOverloadProvider, BasicsSharedLookupOverloadProvider } from '@libs/basics/shared';
import { ILogisticPlantsupplierPlantSupplyItemEntity } from '@libs/logistic/interfaces';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const logisticPlantsupplierPlantSupplyItemEntityInfoGenerated = <IEntityInfo<ILogisticPlantsupplierPlantSupplyItemEntity>>{
	grid: {
		title: {
			text: 'PlantSupplyItem',
			key: 'logistic.plantsupplier.plantsupplierListTitle'
		}
	},
	form: {
		title: {
			text: 'PlantSupplyItem',
			key: 'logistic.plantsupplier.plantsupplierDetailTitle'
		},
		containerUuid: '5f1bee9c5ae844889ab4b40d47535a12'
	},
	dataService: (ctx) => ctx.injector.get(LogisticPlantsupplierPlantSupplyItemDataService),
	validationService: (ctx) => ctx.injector.get(LogisticPlantsupplierPlantSupplyItemValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Logistic.Plantsupplier',
		typeName: 'PlantSupplyItemDto'
	},
	permissionUuid: '6b48b5efc7074d6b970212972b484139',
	layoutConfiguration: async (ctx) => {
		const resourceEquipmentLookupProvider = await ctx.lazyInjector.inject(RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<ILogisticPlantsupplierPlantSupplyItemEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'ConsumptionDate',
						'MaterialFk',
						'PlantFk',
						'Quantity',
						'Price',
						'PlantSupplyItemStatusFk',
						//'JobFk',
						'ExternalId',
						'IsSettled',
					]
				},
			],
			overloads: {
				MaterialFk: BasicsSharedLookupOverloadProvider.provideMaterialLookupOverload(true),
				PlantFk: resourceEquipmentLookupProvider.providePlantLookupOverload(),
				PlantSupplyItemStatusFk: BasicsSharedCustomizeLookupOverloadProvider.providePlantSupplyItemStatusLookupOverload(true)
			},
			labels: { 
				...prefixAllTranslationKeys('logistic.plantsupplier.', {
					ConsumptionDate: { key: 'entityConsumptionDate' },
					MaterialFk: { key: 'entityMaterialFk' },
					PlantFk: { key: 'entityPlantFk' },
					Quantity: { key: 'entityQuantity' },
					Price: { key: 'entityPrice' },
					PlantSupplyItemStatusFk: { key: 'entityPlantSupItemStatFk' },
					JobFk: { key: 'entityJobFk' },
					ExternalId: { key: 'entityExternalId' },
					IsSettled: { key: 'entityIsSettled' }
				}),
			 }
		};
	}
};