/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptDataServiceGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { LogisticCardTemplateJobCardActivityTemplateUpdate } from '../../../model/logistic-card-template-job-card-activity-template-update.class';
import { LogisticCardTemplateJobCardActivityTemplateDataService } from '../logistic-card-template-job-card-activity-template-data.service';
import { inject } from '@angular/core';
import { ILogisticCardTemplateJobCardActivityTemplateEntity, ILogisticCardTemplateJobCardRecordTemplateEntity } from '@libs/logistic/interfaces';
import {
	DataServiceFlatLeaf,
	EntityArrayProcessor,
	IDataServiceEndPointOptions,
	IDataServiceOptions,
	IDataServiceRoleOptions,
	ServiceRole
} from '@libs/platform/data-access';
import { ConcreteFieldOverload, createLookup, FieldType } from '@libs/ui/common';
import { BasicsSharedMaterialLookupService, IMaterialSearchEntity } from '@libs/basics/shared';
import { BehaviorSubject } from 'rxjs';
import { IResourceEquipmentLookupProvider } from '@libs/resource/interfaces';
import { ILogisticSundryServiceLookupProvider } from '@libs/logistic/shared';

export class LogisticCardTemplateJobCardRecordTemplateDataGeneratedService extends DataServiceFlatLeaf<ILogisticCardTemplateJobCardRecordTemplateEntity,ILogisticCardTemplateJobCardActivityTemplateEntity,LogisticCardTemplateJobCardActivityTemplateUpdate> {
	public static readonly resultOverloadSubject = new BehaviorSubject<ConcreteFieldOverload<ILogisticCardTemplateJobCardRecordTemplateEntity>>({
		type: FieldType.Description
	});
	public constructor(){
		const options: IDataServiceOptions<ILogisticCardTemplateJobCardRecordTemplateEntity> = {
			apiUrl: 'logistic/cardtemplate/recordtemplate',
			readInfo: <IDataServiceEndPointOptions>{
				endPoint: 'listbyparent',
				usePost: true
			},
			roleInfo: <IDataServiceRoleOptions<ILogisticCardTemplateJobCardRecordTemplateEntity>>{
				role: ServiceRole.Leaf,
				itemName: 'RecordTemplates',
				parent: inject(LogisticCardTemplateJobCardActivityTemplateDataService)
			},
			processors: [new EntityArrayProcessor<ILogisticCardTemplateJobCardRecordTemplateEntity>(['SubResources'])]
		};
		super(options);
	}
	public override isParentFn(parentKey: ILogisticCardTemplateJobCardActivityTemplateEntity, entity: ILogisticCardTemplateJobCardRecordTemplateEntity): boolean {
		return entity.JobCardActivityTemplateFk === parentKey.Id;
	}
	public static updateResultOverload(entity?: ILogisticCardTemplateJobCardRecordTemplateEntity,plantProvider?:IResourceEquipmentLookupProvider,sundryServiceProvider?:ILogisticSundryServiceLookupProvider) {
		let value = {};
		if (entity && entity.JobCardRecordTypeFk) {
			switch (entity?.JobCardRecordTypeFk) {
				case 1: // PlantFk
					value = plantProvider?.providePlantLookupOverload({showClearButton: true}) ?? {};
					break;
				case 2: //Material
					value = {
						type: FieldType.Lookup,
						lookupOptions: createLookup<ILogisticCardTemplateJobCardRecordTemplateEntity, IMaterialSearchEntity>({
							dataServiceToken: BasicsSharedMaterialLookupService,
							showClearButton: true
						})
					};
					break;
				case 3: //Sundary Service
					value = sundryServiceProvider?.provideLogisticSundryServiceLookupOverload() ?? {};
					break;

				default:
					value = {};
			}
			this.resultOverloadSubject.next(value);
		}
	}
}