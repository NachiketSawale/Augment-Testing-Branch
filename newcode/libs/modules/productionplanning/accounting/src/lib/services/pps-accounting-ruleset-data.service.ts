/*
 * Copyright(c) RIB Software GmbH
 */

import { Injectable } from '@angular/core';
import {
	DataServiceFlatRoot,
	ServiceRole,
	IDataServiceOptions,
	IDataServiceEndPointOptions,
	IDataServiceRoleOptions
} from '@libs/platform/data-access';

import { PpsAccountingRuleSetComplete } from '../model/pps-accounting-ruleset-complete.class';
import { IRuleSetEntity } from '../model/models';

@Injectable({
	providedIn: 'root'
})

export class PpsAccountingRulesetDataService extends DataServiceFlatRoot<IRuleSetEntity, PpsAccountingRuleSetComplete> {

	public constructor() {
		const options: IDataServiceOptions<IRuleSetEntity> = {
			apiUrl: 'productionplanning/accounting/ruleset',
			readInfo: <IDataServiceEndPointOptions>{
				endPoint: 'filtered',
				usePost: true
			},
			deleteInfo: <IDataServiceEndPointOptions>{
				endPoint: 'multidelete'
			},
			roleInfo: <IDataServiceRoleOptions<IRuleSetEntity>>{
				role: ServiceRole.Root,
				itemName: 'RuleSets',
			}
		};

		super(options);

		// this.processor.addProcessor([
		// 	{ process: this.readonlyProcess.bind(this), revertProcess() {} }
		// ]);
	}

	// private readonlyProcess(item: IRuleSetEntity): void  {
	// 	this.setEntityReadOnlyFields(item, [{ field: 'AutoGenerated', readOnly: true  }] as IReadOnlyField<IRuleSetEntity>[]);
	// }

	public override createUpdateEntity(modified: IRuleSetEntity | null): PpsAccountingRuleSetComplete {
		const complete = new PpsAccountingRuleSetComplete();
		if (modified !== null) {
			complete.Id = modified.Id;
			complete.RuleSets = [modified];
		}

		return complete;
	}

	public override getModificationsFromUpdate(complete: PpsAccountingRuleSetComplete): IRuleSetEntity[] {
		if (complete.RuleSets === null) {
			complete.RuleSets = [];
		}
		return complete.RuleSets;
	}
}





		
			





