/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptModuleInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceTypeAlternativeResTypeDataService } from '../../services/data/resource-type-alternative-res-type-data.service';
import { ResourceTypeAlternativeResTypeValidationService } from '../../services/validation/resource-type-alternative-res-type-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceTypeAlternativeResTypeEntity, RESOURCE_TYPE_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceTypeAlternativeResTypeEntityInfoGenerated = <IEntityInfo<IResourceTypeAlternativeResTypeEntity>>{
	grid: {
		title: {
			text: 'AlternativeResType',
			key: 'resource.type.alternativeResTypeListTitle'
		}
	},
	form: {
		title: {
			text: 'AlternativeResType',
			key: 'resource.type.alternativeResTypeDetailTitle'
		},
		containerUuid: 'ddeb7bd64d6c4eceb84dec9b7b0dbe00'
	},
	dataService: (ctx) => ctx.injector.get(ResourceTypeAlternativeResTypeDataService),
	validationService: (ctx) => ctx.injector.get(ResourceTypeAlternativeResTypeValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Type',
		typeName: 'AlternativeResTypeDto'
	},
	permissionUuid: '626a87698fef4e69bff848173b424519',
	layoutConfiguration: async (ctx) => {
		const resTypeLookupProvider = await ctx.lazyInjector.inject(RESOURCE_TYPE_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceTypeAlternativeResTypeEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'Quantity',
						'ResAlterTypeFk',
					]
				},
			],
			overloads: {
				ResAlterTypeFk: resTypeLookupProvider.generateResourceTypeLookup()
			},
			labels: {
				...prefixAllTranslationKeys('resource.type.', {
					Quantity: { key: 'entityQuantity' },
					ResAlterTypeFk: { key: 'alternativeResTypeEntity' }
				}),
			 }
		};
	}
};