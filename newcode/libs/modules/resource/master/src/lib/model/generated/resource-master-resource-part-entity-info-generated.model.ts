/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptModuleInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceMasterResourcePartDataService } from '../../services/data/resource-master-resource-part-data.service';
import { ResourceMasterResourcePartValidationService } from '../../services/validation/resource-master-resource-part-validation.service';
import { BasicsSharedCustomizeLookupOverloadProvider, BasicsSharedLookupOverloadProvider } from '@libs/basics/shared';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceMasterResourcePartEntity, RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceMasterResourcePartEntityInfoGenerated = <IEntityInfo<IResourceMasterResourcePartEntity>>{
	grid: {
		title: {
			text: 'ResourcePart',
			key: 'resource.master.resourcePartListTitle'
		}
	},
	form: {
		title: {
			text: 'ResourcePart',
			key: 'resource.master.resourcePartDetailTitle'
		},
		containerUuid: 'bb8ddc00f77c4535ada29aa2fd3b21d7'
	},
	dataService: (ctx) => ctx.injector.get(ResourceMasterResourcePartDataService),
	validationService: (ctx) => ctx.injector.get(ResourceMasterResourcePartValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Master',
		typeName: 'ResourcePartDto'
	},
	permissionUuid: 'dd7c02126a9c4654bb7d99ece8af7caa',
	layoutConfiguration: async (ctx) => {
		const resourceEquipmentLookupProvider = await ctx.lazyInjector.inject(RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceMasterResourcePartEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'DescriptionInfo',
						'ResourcePartTypeFk',
						'PlantFk',
						'IsMainPart',
						//'EmployeeFk',
						'Price',
						'CurrencyFk',
						'CommentText',
					]
				},
			],
			overloads: {
				ResourcePartTypeFk: BasicsSharedCustomizeLookupOverloadProvider.provideResourcePartTypeLookupOverload(true),
				PlantFk: resourceEquipmentLookupProvider.providePlantLookupOverload(),
				CurrencyFk: BasicsSharedLookupOverloadProvider.provideCurrencyLookupOverload(true)
			},
			labels: { 
				...prefixAllTranslationKeys('resource.master.', {
					ResourcePartTypeFk: { key: 'partType' },
					PlantFk: { key: 'entityPlant' },
					IsMainPart: { key: 'isMainPart' },
					EmployeeFk: { key: 'entityEmployee' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					DescriptionInfo: { key: 'entityDescription' },
					Price: { key: 'entityRate' },
					CurrencyFk: { key: 'entityCurrency' },
					CommentText: { key: 'entityComment' }
				}),
			 }
		};
	}
};