/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTypeScriptModuleInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceMasterRequiredResourceSkillDataService } from '../../services/data/resource-master-required-resource-skill-data.service';
import { ResourceMasterRequiredResourceSkillValidationService } from '../../services/validation/resource-master-required-resource-skill-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceMasterRequiredResourceSkillEntity, RESOURCE_SKILL_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceMasterRequiredResourceSkillEntityInfoGenerated = <IEntityInfo<IResourceMasterRequiredResourceSkillEntity>>{
	grid: {
		title: {
			text: 'RequiredResourceSkill',
			key: 'resource.master.requiredSkillListTitle'
		}
	},
	form: {
		title: {
			text: 'RequiredResourceSkill',
			key: 'resource.master.requiredSkillDetailTitle'
		},
		containerUuid: '0fe7865b879b4dc0a9b2c8f88dd71484'
	},
	dataService: (ctx) => ctx.injector.get(ResourceMasterRequiredResourceSkillDataService),
	validationService: (ctx) => ctx.injector.get(ResourceMasterRequiredResourceSkillValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Master',
		typeName: 'RequiredResourceSkillDto'
	},
	permissionUuid: '485827a79a4b41b5aa8db9f323810cd2',
	layoutConfiguration: async (ctx) => {
		const resourceSkillLookupProvider = await ctx.lazyInjector.inject(RESOURCE_SKILL_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceMasterRequiredResourceSkillEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'SkillFk',
						'CommentText',
					]
				},
			],
			overloads: {SkillFk: resourceSkillLookupProvider.provideResourceSkillLookupOverload()},
			labels: {
				...prefixAllTranslationKeys('resource.master.', {}),
				...prefixAllTranslationKeys('resource.skill.', {
					SkillFk: { key: 'resourceSkillEntity' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					CommentText: { key: 'entityComment' }
				}),
			 }
		};
	}
};