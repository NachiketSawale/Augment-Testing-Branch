/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantCommentDataService } from '../../services/data/resource-equipment-plant-comment-data.service';
import { ResourceEquipmentPlantCommentValidationService } from '../../services/validation/resource-equipment-plant-comment-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantCommentEntity } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantCommentEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantCommentEntity>>{
	grid: {
		title: {
			text: 'Plant Comment',
			key: ''
		}
	},
	form: {
		title: {
			text: 'Plant Comment Detail',
			key: ''
		},
		containerUuid: '13b75390ccad47bebe152b6615f2aeca'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantCommentDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantCommentValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantCommentDto'
	},
	permissionUuid: '90ae201df9584e09b26c8b091635fa7e',
	layoutConfiguration: async (ctx) => {
		return <ILayoutConfiguration<IResourceEquipmentPlantCommentEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'PlantCommentFk',
						'PlantFk',
						'Specification',
						'ClerkFk',
					]
				},
			],
			overloads: {},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					PlantCommentFk: { key: 'entityPlantComment' },
					PlantFk: { key: 'entityPlant' },
					Specification: { key: 'entitySpecification' }
				}),
				...prefixAllTranslationKeys('basics.clerk.', {
					ClerkFk: { key: 'entityClerk' }
				}),
			 }
		};
	}
};