/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentMaintenanceDataService } from '../../services/data/resource-equipment-maintenance-data.service';
import { ResourceEquipmentMaintenanceValidationService } from '../../services/validation/resource-equipment-maintenance-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentMaintenanceEntity, RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN, RESOURCE_MAINTENANCE_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentMaintenanceEntityInfoGenerated = <IEntityInfo<IResourceEquipmentMaintenanceEntity>>{
	grid: {
		title: {
			text: 'Maintenance',
			key: 'resource.equipment.plantMaintenanceListTitle'
		}
	},
	form: {
		title: {
			text: 'Maintenance Detail',
			key: 'resource.equipment.plantMaintenanceDetailTitle'
		},
		containerUuid: '76ea5f472fa14838915bad3b76e64f43'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentMaintenanceDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentMaintenanceValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'MaintenanceDto'
	},
	permissionUuid: 'af1dcf780b1b49c48857b990b455ac3c',
	layoutConfiguration: async (ctx) => {
		const resourceEquipmentLookupProvider = await ctx.lazyInjector.inject(RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN);
		const resourceMaintenanceLookupProvider = await ctx.lazyInjector.inject(RESOURCE_MAINTENANCE_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceEquipmentMaintenanceEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'Code',
						'Description',
						'MaintenanceStatusFk',
						'StartDate',
						'EndDate',
						'IsFixedDays',
						'DaysAfter',
						'IsPerformanceBased',
						'UoMFk',
						'Quantity',
						'Duration',
						'Remark',
						'Comment',
						//'JobCardFk',
						//'MaintSchemaRecFk',
						'PlantCompMaintSchemaFk',
						'PlantFk',
						'IsRecalcDates',
						'IsRecalcPerformance',
						'MaintenanceSchemaFk',
					]
				},
			],
			overloads: {
				PlantCompMaintSchemaFk: resourceEquipmentLookupProvider.providePlantComponentMaintSchemaLookupOverload(),
				MaintenanceSchemaFk: resourceMaintenanceLookupProvider.provideMaintenanceSchemaLookupOverload()
			},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					UoMFk: { key: 'entityUoM' },
					Quantity: { key: 'entityItemQuantity' },
					Duration: { key: 'entityDuration' },
					Remark: { key: 'entityRemark' },
					MaintSchemaRecFk: { key: 'maintenanceSchemaRecord' },
					PlantCompMaintSchemaFk: { key: 'entityPlantCompMaintSchemaFk' },
					PlantFk: { key: 'entityPlant' },
					IsRecalcDates: { key: 'entityIsRecalcDates' },
					IsRecalcPerformance: { key: 'entityIsRecalcPerformance' },
					MaintenanceSchemaFk: { key: 'maintenanceSchema' }
				}),
				...prefixAllTranslationKeys('basics.customize.', {
					Code: { key: 'costCode' },
					IsFixedDays: { key: 'isfixeddays' },
					DaysAfter: { key: 'daysafter' },
					IsPerformanceBased: { key: 'isperformancebased' },
					JobCardFk: { key: 'jobcardfk' }
				}),
				...prefixAllTranslationKeys('resource.common.', {
					Description: { key: 'plantDescription' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					MaintenanceStatusFk: { key: 'entityStatus' },
					StartDate: { key: 'entityStartDate' },
					EndDate: { key: 'entityEndDate' },
					Comment: { key: 'entityComment' }
				}),
			 }
		};
	}
};