/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentCertificatedPlantDataService } from '../../services/data/resource-equipment-certificated-plant-data.service';
import { ResourceEquipmentCertificatedPlantValidationService } from '../../services/validation/resource-equipment-certificated-plant-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentCertificatedPlantEntity } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentCertificatedPlantEntityInfoGenerated = <IEntityInfo<IResourceEquipmentCertificatedPlantEntity>>{
	grid: {
		title: {
			text: 'Plant Certification',
			key: 'resource.equipment.plantCertificationListTitle'
		}
	},
	form: {
		title: {
			text: 'Plant Certification Detail',
			key: 'resource.equipment.plantCertificationDetailTitle'
		},
		containerUuid: 'c53907e3aa1c42c0b1222d233a63f825'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentCertificatedPlantDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentCertificatedPlantValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'CertificatedPlantDto'
	},
	permissionUuid: '6182b7c0ed6e498492dbe88e061f3457',
	layoutConfiguration: async (ctx) => {
		return <ILayoutConfiguration<IResourceEquipmentCertificatedPlantEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						//'CertificateFk',
						'CommentText',
						'ValidFrom',
						'ValidTo',
					]
				},
			],
			overloads: {},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					CertificateFk: { key: 'entityPlantCertificate' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					CommentText: { key: 'entityComment' },
					ValidFrom: { key: 'entityValidFrom' },
					ValidTo: { key: 'entityValidTo' }
				}),
			 }
		};
	}
};