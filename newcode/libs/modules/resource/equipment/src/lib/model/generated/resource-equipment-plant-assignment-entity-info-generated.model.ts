/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantAssignmentDataService } from '../../services/data/resource-equipment-plant-assignment-data.service';
import { ResourceEquipmentPlantAssignmentValidationService } from '../../services/validation/resource-equipment-plant-assignment-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantAssignmentEntity } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantAssignmentEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantAssignmentEntity>>{
	grid: {
		title: {
			text: 'Assignments',
			key: 'resource.equipment.plantAssignmentListTitle'
		}
	},
	form: {
		title: {
			text: 'Assignments Detail',
			key: 'resource.equipment.plantAssignmentDetailTitle'
		},
		containerUuid: 'dd1bbd6ab5c949d998665092a5c583d9'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantAssignmentDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantAssignmentValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantAssignmentDto'
	},
	permissionUuid: 'dd49d6ac8e844f50b8411e50e31caea8',
	layoutConfiguration: async (ctx) => {
		return <ILayoutConfiguration<IResourceEquipmentPlantAssignmentEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'Description',
						'Plant2Fk',
						'Quantity',
						'UomFk',
						'CommentText',
					]
				},
			],
			overloads: {},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					Plant2Fk: { key: 'plantPlant2Fk' },
					Quantity: { key: 'entityItemQuantity' }
				}),
				...prefixAllTranslationKeys('resource.common.', {
					Description: { key: 'plantDescription' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					UomFk: { key: 'entityUoM' },
					CommentText: { key: 'entityComment' }
				}),
			 }
		};
	}
};