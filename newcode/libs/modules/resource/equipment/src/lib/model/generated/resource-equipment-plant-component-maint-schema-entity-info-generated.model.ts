/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantComponentMaintSchemaDataService } from '../../services/data/resource-equipment-plant-component-maint-schema-data.service';
import { ResourceEquipmentPlantComponentMaintSchemaValidationService } from '../../services/validation/resource-equipment-plant-component-maint-schema-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantComponentMaintSchemaEntity, RESOURCE_MAINTENANCE_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantComponentMaintSchemaEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantComponentMaintSchemaEntity>>{
	grid: {
		title: {
			text: 'Component Maintenance Schemas',
			key: 'resource.equipment.componentMaintSchemaListTitle'
		}
	},
	form: {
		title: {
			text: 'Component Maintenance Schemas Detail',
			key: 'resource.equipment.componentMaintSchemaDetailTitle'
		},
		containerUuid: 'adacbb70781511eabc550242ac130003'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantComponentMaintSchemaDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantComponentMaintSchemaValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantComponentMaintSchemaDto'
	},
	permissionUuid: 'adacb904781511eabc550242ac130003',
	layoutConfiguration: async (ctx) => {
		const resourceMaintenanceLookupProvider = await ctx.lazyInjector.inject(RESOURCE_MAINTENANCE_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceEquipmentPlantComponentMaintSchemaEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'MaintSchemaFk',
						'Description',
						'CommentText',
						'ValidFrom',
						'ValidTo',
						'PlantFk',
					]
				},
			],
			overloads: {
				MaintSchemaFk: resourceMaintenanceLookupProvider.provideMaintenanceSchemaLookupOverload()
			},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					MaintSchemaFk: { key: 'entityPlantCompMaintSchemaFk' },
					PlantFk: { key: 'entityPlant' }
				}),
				...prefixAllTranslationKeys('resource.common.', {
					Description: { key: 'plantDescription' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					CommentText: { key: 'entityComment' },
					ValidFrom: { key: 'entityValidFrom' },
					ValidTo: { key: 'entityValidTo' }
				}),
			 }
		};
	}
};