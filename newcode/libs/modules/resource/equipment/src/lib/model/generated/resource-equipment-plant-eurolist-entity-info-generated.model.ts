/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantEurolistDataService } from '../../services/data/resource-equipment-plant-eurolist-data.service';
import { ResourceEquipmentPlantEurolistValidationService } from '../../services/validation/resource-equipment-plant-eurolist-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantEurolistEntity, RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { ResourceSharedLookupOverloadProvider } from '@libs/resource/shared';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantEurolistEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantEurolistEntity>>{
	grid: {
		title: {
			text: 'Catalog Estimation',
			key: 'resource.equipment.plantEurolistListTitle'
		}
	},
	form: {
		title: {
			text: 'Catalog Estimation Detail',
			key: 'resource.equipment.plantEurolistDetailTitle'
		},
		containerUuid: '2dd482ff9dd043209388b267dd278a83'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantEurolistDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantEurolistValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantEurolistDto'
	},
	permissionUuid: 'c779f23a59854b0c9c9960044319d8a4',
	layoutConfiguration: async (ctx) => {
		const resourceEquipmentLookupProvider = await ctx.lazyInjector.inject(RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceEquipmentPlantEurolistEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'CatalogFk',
						'LookupCode',
						'CatalogRecordFk',
						'Quantity',
						'UomFk',
						'IsTire',
						'IsInterpolated',
						'IsManual',
						'Reinstallment',
						'ReinstallmentYear',
						'DeviceParameter1',
						'DeviceParameter2',
						'Description',
						'CatalogRecordLowerFk',
						'CatalogRecordUpperFk',
						'DepreciationLowerFrom',
						'DepreciationLowerTo',
						'DepreciationUpperFrom',
						'DepreciationUpperTo',
						'DepreciationPercentFrom',
						'DepreciationPercentTo',
						'Depreciation',
						'RepairUpper',
						'RepairLower',
						'RepairPercent',
						'RepairCalculated',
						'ReinstallmentLower',
						'ReinstallmentUpper',
						'ReinstallmentCalculated',
						'PriceIndexCalc',
						'PriceIndexLower',
						'PriceIndexUpper',
						'IsExtrapolated',
						'Code',
						'PlantEurolistFk',
					]
				},
			],
			overloads: {
				PlantEurolistFk: resourceEquipmentLookupProvider.providePlantEurolistLookupOverload(),
				CatalogFk: ResourceSharedLookupOverloadProvider.provideResourceCatalogLookupOverload(true),
				CatalogRecordFk: ResourceSharedLookupOverloadProvider.provideResourceCatalogRecordLookupOverload(true),
				CatalogRecordLowerFk: ResourceSharedLookupOverloadProvider.provideResourceCatalogRecordLookupOverload(true),
				CatalogRecordUpperFk: ResourceSharedLookupOverloadProvider.provideResourceCatalogRecordLookupOverload(true)
			},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					CatalogFk: { key: 'entityCatalogFk' },
					LookupCode: { key: 'entityLookupCode' },
					CatalogRecordFk: { key: 'entityCatalogRecordFk' },
					Quantity: { key: 'entityItemQuantity' },
					IsTire: { key: 'entityIsTire' },
					IsInterpolated: { key: 'entityIsInterpolated' },
					Reinstallment: { key: 'entityReInstatmentCost' },
					ReinstallmentYear: { key: 'entityReInstatmentYear' },
					DeviceParameter1: { key: 'entityDeviceParameter1' },
					DeviceParameter2: { key: 'entityDeviceParameter2' },
					CatalogRecordLowerFk: { key: 'entityCatalogRecordLower' },
					CatalogRecordUpperFk: { key: 'entityCatalogRecordUpper' },
					DepreciationLowerFrom: { key: 'entityDepreciationLowerFrom' },
					DepreciationLowerTo: { key: 'entityDepreciationLowerTo' },
					DepreciationUpperFrom: { key: 'entityDepreciationUpperFrom' },
					DepreciationUpperTo: { key: 'entityDepreciationUpperTo' },
					DepreciationPercentFrom: { key: 'entityDepreciationPercentFrom' },
					DepreciationPercentTo: { key: 'entityDepreciationPercentTo' },
					Depreciation: { key: 'entityDepreciation' },
					RepairUpper: { key: 'entityRepairUpper' },
					RepairLower: { key: 'entityRepairLower' },
					RepairPercent: { key: 'entityRepairPercent' },
					RepairCalculated: { key: 'entityRepairCalculated' },
					ReinstallmentLower: { key: 'entityReinstallmentLower' },
					ReinstallmentUpper: { key: 'entityReinstallmentUpper' },
					ReinstallmentCalculated: { key: 'entityReinstallmentCalculated' },
					PriceIndexCalc: { key: 'entityPriceIndexCalc' },
					PriceIndexLower: { key: 'entityPriceIndexLower' },
					PriceIndexUpper: { key: 'entityPriceIndexUpper' },
					IsExtrapolated: { key: 'entityIsExtrapolated' },
					PlantEurolistFk: { key: 'entityPlantEurolistFk' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					UomFk: { key: 'entityUoM' }
				}),
				...prefixAllTranslationKeys('basics.customize.', {
					IsManual: { key: 'isManual' },
					Code: { key: 'costCode' }
				}),
				...prefixAllTranslationKeys('resource.common.', {
					Description: { key: 'plantDescription' }
				}),
			 }
		};
	}
};