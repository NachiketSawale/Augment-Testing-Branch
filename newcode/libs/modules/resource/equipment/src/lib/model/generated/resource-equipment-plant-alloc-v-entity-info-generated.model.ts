/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantAllocVDataService } from '../../services/data/resource-equipment-plant-alloc-v-data.service';
import { ResourceEquipmentPlantAllocVValidationService } from '../../services/validation/resource-equipment-plant-alloc-v-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantAllocVEntity } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantAllocVEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantAllocVEntity>>{
	grid: {
		title: {
			text: 'Plant Allocations',
			key: 'resource.equipment.plantAllocVListTitle'
		}
	},
	form: {
		title: {
			text: 'Plant Allocations Detail',
			key: 'resource.equipment.plantAllocVDetailTitle'
		},
		containerUuid: '4ab67f61ff25460e9d8fb982e36fd031'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantAllocVDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantAllocVValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantAllocVDto'
	},
	permissionUuid: '7d12068f91774d119268f8c79e018385',
	layoutConfiguration: async (ctx) => {
		return <ILayoutConfiguration<IResourceEquipmentPlantAllocVEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'ProjectName',
						'CompanyInFk',
						'CompanyInCode',
						'CompanyInName',
						'CompanyOutFk',
						'CompanyOutCode',
						'CompanyOutName',
						//'PlantTypeFk',
						'IsBulk',
						//'PlantKindFk',
						//'ProjectChangeFk',
						//'ProjectChangeStatusFk',
						'AllocatedFrom',
						'AllocatedTo',
						'UomFk',
						'WorkOperationTypeFk',
						'ControllingUnitFk',
						'ReservationFk',
						'DispatchHeaderInFk',
						'DispatchHeaderOutFk',
					]
				},
			],
			overloads: {},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					ProjectName: { key: 'entityProjectName' },
					CompanyInFk: { key: 'entityCompanyIn' },
					CompanyInCode: { key: 'entityCompanyInCode' },
					CompanyInName: { key: 'entityCompanyInName' },
					CompanyOutFk: { key: 'entityCompanyOut' },
					CompanyOutCode: { key: 'entityCompanyOutCode' },
					CompanyOutName: { key: 'entityCompanyOutName' },
					PlantTypeFk: { key: 'planttype' },
					PlantKindFk: { key: 'plantkind' },
					WorkOperationTypeFk: { key: 'entityWorkOperationTypeFk' },
					ControllingUnitFk: { key: 'entityContractControllingUnitFk' },
					DispatchHeaderInFk: { key: 'entityDispatchHeaderInFk' },
					DispatchHeaderOutFk: { key: 'entityDispatchHeaderOutFk' }
				}),
				...prefixAllTranslationKeys('project.costcodes.', {}),
				...prefixAllTranslationKeys('logistic.job.', {
					IsBulk: { key: 'plantIsBulkEntity' },
					AllocatedFrom: { key: 'allocatedFrom' },
					AllocatedTo: { key: 'allocatedTo' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					ProjectChangeFk: { key: 'entityProjectChange' },
					UomFk: { key: 'entityUoM' }
				}),
				...prefixAllTranslationKeys('basics.customize.', {
					ProjectChangeStatusFk: { key: 'projectchangestatus' }
				}),
				...prefixAllTranslationKeys('resource.reservation.', {
					ReservationFk: { key: 'entityReservation' }
				}),
			 }
		};
	}
};