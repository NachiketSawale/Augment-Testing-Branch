/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantComponentDataService } from '../../services/data/resource-equipment-plant-component-data.service';
import { ResourceEquipmentPlantComponentValidationService } from '../../services/validation/resource-equipment-plant-component-validation.service';
import { BasicsSharedLookupOverloadProvider } from '@libs/basics/shared';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { ProjectSharedLookupOverloadProvider } from '@libs/project/shared';
import { IResourceEquipmentPlantComponentEntity, RESOURCE_MAINTENANCE_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantComponentEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantComponentEntity>>{
	grid: {
		title: {
			text: 'Components',
			key: 'resource.equipment.plantComponentListTitle'
		}
	},
	form: {
		title: {
			text: 'Components Detail',
			key: 'resource.equipment.plantComponentDetailTitle'
		},
		containerUuid: '5f0e8f1e8d5142b099cc5fb4aabd26fa'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantComponentDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantComponentValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantComponentDto'
	},
	permissionUuid: '9f4ef6e2ff6d403fbb24f760c0c5fb70',
	layoutConfiguration: async (ctx) => {
		const resourceMaintenanceLookupProvider = await ctx.lazyInjector.inject(RESOURCE_MAINTENANCE_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceEquipmentPlantComponentEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'PlantComponentTypeFk',
						'MaintenanceSchemaFk',
						'Description',
						'MeterNo',
						'UomFk',
						'ValidFrom',
						'ValidTo',
						'EndWarranty',
						'CommentText',
						'UserDefined01',
						'UserDefined02',
						'UserDefined03',
						'UserDefined04',
						'UserDefined05',
						'NfcId',
						'SerialNumber',
						//'HomeProjectFk',
						'ProjectLocationFk',
					]
				},
			],
			overloads: {
				MaintenanceSchemaFk: resourceMaintenanceLookupProvider.provideMaintenanceSchemaLookupOverload(),
				UomFk: BasicsSharedLookupOverloadProvider.provideUoMLookupOverload(true),
				ProjectLocationFk: ProjectSharedLookupOverloadProvider.provideProjectLocationLookupOverload(true)
			},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					PlantComponentTypeFk: { key: 'entityPlantComponentTypeFk' },
					MaintenanceSchemaFk: { key: 'maintenanceSchema' },
					MeterNo: { key: 'entityMeterNo' },
					EndWarranty: { key: 'entityEndWarranty' },
					UserDefined01: { key: 'entityUserDefined01' },
					UserDefined02: { key: 'entityUserDefined02' },
					UserDefined03: { key: 'entityUserDefined03' },
					UserDefined04: { key: 'entityUserDefined04' },
					UserDefined05: { key: 'entityUserDefined05' },
					NfcId: { key: 'nfcId' },
					SerialNumber: { key: 'entitySerialNumber' },
					HomeProjectFk: { key: 'homeProject' },
					ProjectLocationFk: { key: 'homeLocation' }
				}),
				...prefixAllTranslationKeys('resource.common.', {
					Description: { key: 'plantDescription' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					UomFk: { key: 'entityUoM' },
					ValidFrom: { key: 'entityValidFrom' },
					ValidTo: { key: 'entityValidTo' },
					CommentText: { key: 'entityComment' }
				}),
			 }
		};
	}
};