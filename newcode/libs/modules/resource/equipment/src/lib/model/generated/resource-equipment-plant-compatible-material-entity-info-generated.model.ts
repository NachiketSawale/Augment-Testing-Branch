/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantCompatibleMaterialDataService } from '../../services/data/resource-equipment-plant-compatible-material-data.service';
import { ResourceEquipmentPlantCompatibleMaterialValidationService } from '../../services/validation/resource-equipment-plant-compatible-material-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantCompatibleMaterialEntity, RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantCompatibleMaterialEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantCompatibleMaterialEntity>>{
	grid: {
		title: {
			text: 'Compatible Materials',
			key: 'resource.equipment.compatibleMaterialListTitle'
		}
	},
	form: {
		title: {
			text: 'Compatible Materials Detail',
			key: 'resource.equipment.compatibleMaterialDetailsTitle'
		},
		containerUuid: '47488ebd7e73436ab9ae9ba7acfc6cec'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantCompatibleMaterialDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantCompatibleMaterialValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantCompatibleMaterialDto'
	},
	permissionUuid: '26b70d12f6134c08af7f3b173dd76c37',
	layoutConfiguration: async (ctx) => {
		const resourceEquipmentLookupProvider = await ctx.lazyInjector.inject(RESOURCE_EQUIPMENT_LOOKUP_PROVIDER_TOKEN);
		return <ILayoutConfiguration<IResourceEquipmentPlantCompatibleMaterialEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'PlantComponentFk',
						'MaterialCatalogFk',
						'MaterialFk',
						'CommentText',
					]
				},
			],
			overloads: {
				PlantComponentFk: resourceEquipmentLookupProvider.providePlantComponentLookupOverload()
			},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					PlantComponentFk: { key: 'entityPlantComponent' },
					MaterialCatalogFk: { key: 'entityMaterialCatalog' },
					MaterialFk: { key: 'entityMaterial' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					CommentText: { key: 'entityComment' }
				}),
			 }
		};
	}
};