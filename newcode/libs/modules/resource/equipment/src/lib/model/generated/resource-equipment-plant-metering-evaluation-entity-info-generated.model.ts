/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantMeteringEvaluationDataService } from '../../services/data/resource-equipment-plant-metering-evaluation-data.service';
import { ResourceEquipmentPlantMeteringEvaluationValidationService } from '../../services/validation/resource-equipment-plant-metering-evaluation-validation.service';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantMeteringEvaluationEntity } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantMeteringEvaluationEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantMeteringEvaluationEntity>>{
	grid: {
		title: {
			text: 'Meter Readings',
			key: 'resource.equipment.meterReadingListTitle'
		}
	},
	form: {
		title: {
			text: 'Meter Readings Detail',
			key: 'resource.equipment.meterReadingDetailTitle'
		},
		containerUuid: '4e5a48e1ff614608841430ce1a19101c'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantMeteringEvaluationDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantMeteringEvaluationValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantMeteringEvaluationDto'
	},
	permissionUuid: '0c898f4872c244e599379151ebd8830f',
	layoutConfiguration: async (ctx) => {
		return <ILayoutConfiguration<IResourceEquipmentPlantMeteringEvaluationEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'PlantComponentFk',
						'PlantFk',
						'Recorded',
						'Quantity',
					]
				},
			],
			overloads: {},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					PlantComponentFk: { key: 'entityPlantComponent' },
					PlantFk: { key: 'entityPlant' },
					Recorded: { key: 'recorded' },
					Quantity: { key: 'entityItemQuantity' }
				}),
			 }
		};
	}
};