/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSEntityInfoGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentPlantSpecificValueDataService } from '../../services/data/resource-equipment-plant-specific-value-data.service';
import { ResourceEquipmentPlantSpecificValueValidationService } from '../../services/validation/resource-equipment-plant-specific-value-validation.service';
import { BasicsSharedCustomizeLookupOverloadProvider, BasicsSharedLookupOverloadProvider } from '@libs/basics/shared';
import { prefixAllTranslationKeys } from '@libs/platform/common';
import { IResourceEquipmentPlantSpecificValueEntity } from '@libs/resource/interfaces';
import { IEntityInfo } from '@libs/ui/business-base';
import { ILayoutConfiguration } from '@libs/ui/common';

export const resourceEquipmentPlantSpecificValueEntityInfoGenerated = <IEntityInfo<IResourceEquipmentPlantSpecificValueEntity>>{
	grid: {
		title: {
			text: 'Specific Values',
			key: 'resource.equipment.specificValueList'
		}
	},
	form: {
		title: {
			text: 'Specific Values Detail',
			key: 'resource.equipment.specificValueDetail'
		},
		containerUuid: 'cb30d921aa5e4d3cb897e944b4d95de2'
	},
	dataService: (ctx) => ctx.injector.get(ResourceEquipmentPlantSpecificValueDataService),
	validationService: (ctx) => ctx.injector.get(ResourceEquipmentPlantSpecificValueValidationService),
	dtoSchemeId: {
		moduleSubModule: 'Resource.Equipment',
		typeName: 'PlantSpecificValueDto'
	},
	permissionUuid: '7318154aabd6471d9b99a6a8a376cfe7',
	layoutConfiguration: async (ctx) => {
		return <ILayoutConfiguration<IResourceEquipmentPlantSpecificValueEntity>>{
			groups: [
				{
					gid: 'default',
					attributes: [
						'DescriptionInfo',
						'SpecificValueTypeFk',
						'UomFromTypeFk',
						'UomFk',
						'Quantity',
						'Value',
						'IsManual',
						'Factor',
						'CommentText',
						'CostCodeFk',
						'PlantAssemblyTypeFk',
						//'PlantGroupSpecValueFk',
						//'PlantGroupSpecValueRootFk',
					]
				},
			],
			overloads: {
				SpecificValueTypeFk: BasicsSharedCustomizeLookupOverloadProvider.provideSpecificValueTypeLookupOverload(true),
				UomFromTypeFk: BasicsSharedLookupOverloadProvider.provideUoMLookupOverload(true),
				UomFk: BasicsSharedLookupOverloadProvider.provideUoMLookupOverload(true),
				CostCodeFk: BasicsSharedLookupOverloadProvider.provideCostCodeLookupOverload(true),
				PlantAssemblyTypeFk: BasicsSharedCustomizeLookupOverloadProvider.providePlantAssemblyTypeLookupOverload(true)
			},
			labels: { 
				...prefixAllTranslationKeys('resource.equipment.', {
					DescriptionInfo: { key: 'entityLongDescription' },
					UomFromTypeFk: { key: 'uomFromTypeFk' },
					Quantity: { key: 'entityItemQuantity' },
					Value: { key: 'value' },
					IsManual: { key: 'entityIsManual' },
					Factor: { key: 'entityQualityFactor' },
					PlantGroupSpecValueFk: { key: 'entityPlantGroupSpecValue' },
					PlantGroupSpecValueRootFk: { key: 'entityPlantGroupSpecValueRoot' }
				}),
				...prefixAllTranslationKeys('basics.customize.', {
					SpecificValueTypeFk: { key: 'specificvaluetype' },
					CostCodeFk: { key: 'costCode' },
					PlantAssemblyTypeFk: { key: 'plantassemblytype' }
				}),
				...prefixAllTranslationKeys('cloud.common.', {
					UomFk: { key: 'entityUoM' },
					CommentText: { key: 'entityComment' }
				}),
			 }
		};
	}
};