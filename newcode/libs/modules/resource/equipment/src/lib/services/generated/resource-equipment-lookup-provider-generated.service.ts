/*
 * Copyright(c) RIB Software GmbH
 * ----------------------------------------------------------------------
 * This is auto-generated code by ClientTSLookupHelperGenerator.
 * ----------------------------------------------------------------------
 * This code was generated by RIB Model Generator tool.
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 * ----------------------------------------------------------------------
 */

import { ResourceEquipmentMaintenanceLookupService } from '../lookupdata/resource-equipment-maintenance-lookup.service';
import { ResourceEquipmentPlantAssignmentLookupService } from '../lookupdata/resource-equipment-plant-assignment-lookup.service';
import { ResourceEquipmentPlantComponentLookupService } from '../lookupdata/resource-equipment-plant-component-lookup.service';
import { ResourceEquipmentPlantComponentMaintSchemaLookupService } from '../lookupdata/resource-equipment-plant-component-maint-schema-lookup.service';
import { ResourceEquipmentPlantDocumentLookupService } from '../lookupdata/resource-equipment-plant-document-lookup.service';
import { ResourceEquipmentPlantEurolistLookupService } from '../lookupdata/resource-equipment-plant-eurolist-lookup.service';
import { ResourceEquipmentPlantFixedAssetLookupService } from '../lookupdata/resource-equipment-plant-fixed-asset-lookup.service';
import { ResourceEquipmentPlantLookupService } from '../lookupdata/resource-equipment-plant-lookup.service';
import {
	IResourceEquipmentMaintenanceEntity,
	IResourceEquipmentPlantAssignmentEntity,
	IResourceEquipmentPlantComponentEntity,
	IResourceEquipmentPlantComponentMaintSchemaEntity,
	IResourceEquipmentPlantDocumentEntity,
	IResourceEquipmentPlantEntity,
	IResourceEquipmentPlantEurolistEntity,
	IResourceEquipmentPlantFixedAssetEntity
} from '@libs/resource/interfaces';
import { createLookup, FieldType, ICommonLookupOptions, TypedConcreteFieldOverload } from '@libs/ui/common';

export class ResourceEquipmentLookupProviderGeneratedService {
	public provideEquipmentPlantLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentPlantEntity>({
				dataServiceToken: ResourceEquipmentPlantLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public provideEquipmentPlantReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentPlantEntity>({
				dataServiceToken: ResourceEquipmentPlantLookupService,
				showClearButton: false
			})
		};
	}
	public providePlantDocumentLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentPlantDocumentEntity>({
				dataServiceToken: ResourceEquipmentPlantDocumentLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public providePlantDocumentReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentPlantDocumentEntity>({
				dataServiceToken: ResourceEquipmentPlantDocumentLookupService,
				showClearButton: false
			})
		};
	}
	public providePlantFixedAssetLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentPlantFixedAssetEntity>({
				dataServiceToken: ResourceEquipmentPlantFixedAssetLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public providePlantFixedAssetReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentPlantFixedAssetEntity>({
				dataServiceToken: ResourceEquipmentPlantFixedAssetLookupService,
				showClearButton: false
			})
		};
	}
	public providePlantAssignmentLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentPlantAssignmentEntity>({
				dataServiceToken: ResourceEquipmentPlantAssignmentLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public providePlantAssignmentReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentPlantAssignmentEntity>({
				dataServiceToken: ResourceEquipmentPlantAssignmentLookupService,
				showClearButton: false
			})
		};
	}
	public providePlantComponentLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentPlantComponentEntity>({
				dataServiceToken: ResourceEquipmentPlantComponentLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public providePlantComponentReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentPlantComponentEntity>({
				dataServiceToken: ResourceEquipmentPlantComponentLookupService,
				showClearButton: false
			})
		};
	}
	public providePlantEurolistLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentPlantEurolistEntity>({
				dataServiceToken: ResourceEquipmentPlantEurolistLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public providePlantEurolistReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentPlantEurolistEntity>({
				dataServiceToken: ResourceEquipmentPlantEurolistLookupService,
				showClearButton: false
			})
		};
	}
	public provideMaintenanceLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentMaintenanceEntity>({
				dataServiceToken: ResourceEquipmentMaintenanceLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public provideMaintenanceReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentMaintenanceEntity>({
				dataServiceToken: ResourceEquipmentMaintenanceLookupService,
				showClearButton: false
			})
		};
	}
	public providePlantComponentMaintSchemaLookupOverload<T extends object>(options?: ICommonLookupOptions): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			lookupOptions: createLookup<T,IResourceEquipmentPlantComponentMaintSchemaEntity>({
				dataServiceToken: ResourceEquipmentPlantComponentMaintSchemaLookupService,
				showClearButton: !!options?.showClearButton
			})
		};
	}
	public providePlantComponentMaintSchemaReadonlyLookupOverload<T extends object>(): TypedConcreteFieldOverload<T> {
		return {
			type: FieldType.Lookup,
			readonly: true,
			lookupOptions: createLookup<T,IResourceEquipmentPlantComponentMaintSchemaEntity>({
				dataServiceToken: ResourceEquipmentPlantComponentMaintSchemaLookupService,
				showClearButton: false
			})
		};
	}
}