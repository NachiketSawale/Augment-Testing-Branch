/*
 * Copyright(c) RIB Software GmbH
 */

import { IEstResourceEntity } from '@libs/estimate/interfaces';
import { IEntityProcessor, IEntityRuntimeDataRegistry } from '@libs/platform/data-access';
import { inject } from '@angular/core';
import { LazyInjectable, LazyInjectionToken, PropertyPath } from '@libs/platform/common';
import { EstimateMainResourceType } from '../../common/enums/estimate-main-resource-type.enum';
import { filter, forOwn, isEmpty } from 'lodash';
import { EstimateMainContextService } from './../../common/services/estimate-main-context.service';

export const ESTIMATE_MAIN_RESOURCE_PROCESSOR_TOKEN = new LazyInjectionToken<EstimateResourceBaseProcessService<IEstResourceEntity>>('estimate.main.resource.processor.service');

/**
 * readonly processor for resource
 */
@LazyInjectable({
	token: ESTIMATE_MAIN_RESOURCE_PROCESSOR_TOKEN,
	useAngularInjection: true
})
export class EstimateResourceBaseProcessService<T extends IEstResourceEntity> implements IEntityProcessor<T>{

	protected readonly estimateMainContextService = inject(EstimateMainContextService);

	/**
	 * constructor
	 * @param dataService
	 */
	public constructor(protected dataService: IEntityRuntimeDataRegistry<T>) {
	}

	/**
	 * method to handle the resource readonly
	 * @param resItem
	 */
	public process(resItem: T){
		if (resItem) {
			if(resItem.EstResourceTypeFk === EstimateMainResourceType.ComputationalLine){
				this.processComputationalLineTypeItem(resItem);
				return;
			}

			if(resItem.EstResourceTypeFk === EstimateMainResourceType.InternalTextLine){
				return;
			}

			// set resource type extend field for resource-type lookup
			resItem.EstResourceTypeFkExtend = resItem.EstAssemblyTypeFk ? (4000 + resItem.EstAssemblyTypeFk) : resItem.EstResourceTypeFk;

			// if the resource is generated by rule, set it readonly
			if(resItem && resItem.EstRuleSourceFk) {
				const allFieldsReadOnly : string[] = [];
				forOwn(resItem, function(value, key) {
					if(!key.includes('charactercolumn_')) {
						allFieldsReadOnly.push(key);
					}
				});
				this.setPropertiesReadonly(resItem, allFieldsReadOnly, true);
			}else if(resItem && resItem.EstAssemblyTypeFk) {
				// Set Composite resource to readonly  //resItem.EstResourceFk
				if(resItem.EstResources && resItem.EstResources.length){
					this.setCompoundResourcesDisabled(resItem.EstResources as T[]);
				}
				this.setCostUnitReadOnly(resItem, true);
				this.setLineTypeReadOnly(resItem, true);
				this.setIsBudgetIsCostCodeReadOnly(resItem);
				this.setBudgetReadOnly(resItem, true);
			}else if(resItem &&  resItem.EstResourceTypeFk === EstimateMainResourceType.Plant){
				const sysOpt = this.estimateMainContextService.getSystemOptionForPlantTypeResource();
				// Set Equipment Assembly resources  to readonly
				if(!resItem.IsManual && !sysOpt){
					this.readOnly([resItem], true);
					resItem.cssClass = 'row-readonly-background row-readonly-background-composite';
				}
				if(sysOpt){
					this.setReadOnlyProp(resItem);
				}
				this.setFields(resItem, true);
				this.setCo2ProjectReadonly(resItem);
				this.setCostUnitAndEffectiveCostReadonly(resItem);
				this.setCostUnitLineItemReadonly(resItem);
				this.setIsBudgetIsCostCodeReadOnly(resItem);
				if(resItem.EstResources && resItem.EstResources.length){
					this.setPlantResourcesDisabled(resItem.EstResources as T[], sysOpt);
				}
			}else if (resItem && resItem.cssClass === 'row-readonly-background row-readonly-background-composite'){
				// Set Composite resource to readonly  //resItem.EstResourceFk
				this.readOnly([resItem], true);
			}else{
				this.setReadOnlyProp(resItem);
			}

			if(resItem.PackageAssignments && resItem.IsReadOnlyByPrcPackage){
				this.setColumnReadOnly(resItem,'Code',resItem.IsReadOnlyByPrcPackage);
				this.setColumnReadOnly(resItem,'DescriptionInfo',resItem.IsReadOnlyByPrcPackage);
			}

			if(resItem.DescriptionInfo && resItem.DescriptionInfo.Description === null){
				resItem.DescriptionInfo.Description = '';
				resItem.DescriptionInfo.Translated = '';
			}
		}
	}

	public revertProcess(toProcess: T): void {
	}

	/**
	 * process resources
	 * @param items
	 */
	public processItems(items: T[]){
		items.forEach(item =>{
			if(item && item.Id){
				if(item.EstResourceFk){
					const parent = items.find(e => e.Id === item.EstResourceFk);
					if(parent){
						this.setIsDisabledReadOnly(item, parent);
					}
				}
			}
			this.process(item);
		});
	}

	/**
	 * common method, set the properties readonlly
	 * @param toProcess
	 * @param propertyNames
	 * @param readonly
	 */
	public setPropertiesReadonly(toProcess: T, propertyNames: PropertyPath<T>[], readonly: boolean){
		this.dataService.setEntityReadOnlyFields(toProcess,propertyNames.map(e => {
			return {
				field: e,
				readOnly: readonly
			};
		}));
	}

	/**
	 * set isDisable property readonly
	 * @param resItem
	 * @param parent
	 */
	public setIsDisabledReadOnly(resItem: T, parent: T) {
		if(resItem && resItem.Id && resItem.cssClass !== 'row-readonly-background row-readonly-background-composite'){
			this.setPropertiesReadonly(resItem, ['IsDisabled', 'IsDisabledPrc'], parent.IsDisabled);
		}
	}

	/**
	 * set CostUnit and CostUom readonly
	 * @param resItem
	 */
	public setCostUnitAndEffectiveCostReadonly (resItem: T){
		this.setPropertiesReadonly(resItem, ['CostUnit', 'CostUom'], true);
	}

	/**
	 * set CostUnitLineItem readonly
	 * @param resItem
	 */
	public setCostUnitLineItemReadonly(resItem: T){
		this.setPropertiesReadonly(resItem, ['CostUnitLineItem'], true);
	}

	/**
	 * set resource properties readonly depend on the resource type and isRate
	 * @param resItem
	 */
	public setReadOnlyProp(resItem: T) {
		// 1: cost code, 2: material, 3: plant, 4: assembly, 5: sub item
		if (resItem.EstResourceTypeFk === EstimateMainResourceType.CostCode && resItem.Code)  {
			this.setFields(resItem, resItem.IsRate);
		}else if (resItem.EstResourceTypeFk === EstimateMainResourceType.Material ){
			if(resItem.MdcMaterialFk === null || resItem.MdcMaterialFk === undefined) {
				return this.setFields(resItem, true);
			}
			return this.setFields(resItem, resItem.IsRate);
		} else {
			this.setFields(resItem, true);
		}
	}

	/**
	 * set quantity and cost related properties readonly
	 * @param toProcess
	 * @private
	 */
	private setCostRelPropsReadonly(toProcess: T){
		const props = [
			'BasCurrencyFk',
			'CostFactorCc',
			'QuantityFactorCc',
			'QuantityUnitTarget',
			'QuantityTotal',
			'CostUnitTarget',
			'CostTotal',
			'HoursUnit',
			'HoursUnitTarget',
			'HoursUnitSubItem',
			'HoursUnitLineItem',
			'HoursTotal',
			'QuantityReal',
			'QuantityInternal',
			'CostUnitSubItem',
			'CostUnitLineItem',
			'IsCost',
			'IsManual',
			'IsBudget',
			'IsEstimateCostCode',
			'IsRuleMarkupCostCode',
			'CostUom'
		];
		this.setPropertiesReadonly(toProcess, props, true);
	}

	/**
	 * set properties readonly depend on isFixRate
	 * @param resItem
	 * @param isFixRate
	 */
	public setFields(resItem: T, isFixRate: boolean){
		this.setCostRelPropsReadonly(resItem);
		this.setBudgetRelPropsReadonly(resItem);
		this.setFixRateRelPropsReadonly(resItem, isFixRate);
		this.setPropertiesReadonly(resItem, ['EstResourceTypeFkExtend', 'EstResourceTypeShortKey'], !isEmpty(resItem.Code));
		this.setPropertiesReadonly(resItem, ['BasUomFk'], resItem.EstRuleSourceFk ? true : resItem.EstResourceTypeFk !== EstimateMainResourceType.SubItem);
		this.setPropertiesReadonly(resItem, ['Co2Project'], resItem.EstResourceTypeFk === EstimateMainResourceType.SubItem || resItem.EstResourceTypeFk === EstimateMainResourceType.Assembly);
		this.setPropertiesReadonly(resItem, ['WorkOperationTypeFk'], resItem.EstResourceTypeFk !== EstimateMainResourceType.Plant);
		this.setByEditableFlag(resItem, isFixRate);
	}

	/**
	 * set costUnit related properties readonly
	 * @param resItem
	 * @param flag
	 */
	public setCostUnitReadOnly(resItem: T, flag: boolean) {
		this.setByEditableFlag(resItem, flag);
	}

	/**
	 * set EstResourceTypeFkExtend property readonly
	 * @param resItem
	 * @param flag
	 */
	public setLineTypeReadOnly(resItem: T, flag: boolean) {
		this.setPropertiesReadonly(resItem, ['EstResourceTypeFkExtend'], flag);
	}

	/**
	 * set property readonly
	 * @param resItem
	 * @param column
	 * @param flag
	 */
	public setColumnReadOnly(resItem: T, column: string, flag: boolean) {
		this.setPropertiesReadonly(resItem, [column], flag);
	}

	/**
	 * set IsBudget, IsCost and IsEstimateCostCode property readonly
	 * @param item
	 */
	public setIsBudgetIsCostCodeReadOnly(item: T) {
		this.setPropertiesReadonly(item, ['IsBudget', 'IsCost', 'IsEstimateCostCode'], true);
	}

	/**
	 * set the whole resource properties readonly
	 * @param items
	 * @param isReadOnly
	 */
	public readOnly(items: T[], isReadOnly: boolean){
		items.forEach(e =>{
			if(e && e.Id){
				this.dataService.setEntityReadOnly(e, isReadOnly);
			}
		});
	}

	/**
	 * set compound resource readonly
	 * @param resources
	 */
	public setCompoundResourcesDisabled(resources: T[]){
		this.readOnly(resources, true);
		resources.forEach(resItem => {
			resItem.cssClass = 'row-readonly-background row-readonly-background-composite';
			if (resItem.EstResources && resItem.EstResources.length){
				this.setCompoundResourcesDisabled(resItem.EstResources as T[]);
			}
		});
	}

	/**
	 * set plant resource readonly
	 * @param resources
	 * @param sysOpt
	 */
	public setPlantResourcesDisabled(resources: T[], sysOpt?: boolean){
		if(!sysOpt){
			const nonManualResources = filter(resources, e => !e.IsManual);
			this.readOnly(nonManualResources, true);
			nonManualResources.forEach(resItem => {
				resItem.cssClass = 'row-readonly-background row-readonly-background-composite';
				if (resItem.EstResources && resItem.EstResources.length){
					this.setPlantResourcesDisabled(resItem.EstResources as T[]);
				}
			});

			const isManualResources = filter(resources, e => e.IsManual);
			if(isManualResources){
				isManualResources.forEach(resItem =>{
					this.setPropertiesReadonly(resItem as T, ['Sorting'], true);
				});
			}
		} else {
			resources.forEach(resItem =>{
				this.setReadOnlyProp(resItem);
			});
		}
	}

	/**
	 * set Budget relate properties readonly
	 * @param resItem
	 * @param lookupItemIsBudget
	 */
	public setBudgetReadOnly(resItem: T, lookupItemIsBudget?: boolean | null) {
		this.setPropertiesReadonly(resItem, ['BudgetUnit'], !resItem.IsFixedBudgetUnit);
		this.setPropertiesReadonly(resItem, ['Budget'], !resItem.IsFixedBudget);
		this.setPropertiesReadonly(resItem, ['IsFixedBudget', 'IsFixedBudgetUnit'], !lookupItemIsBudget);
	}

	/**
	 * set Budget relate properties readonly
	 * @param resItem
	 */
	private setBudgetRelPropsReadonly(resItem: T){
		this.setBudgetReadOnly(resItem, resItem.IsBudget);
	}

	/**
	 * set FixRate related properties readonly
	 * @param resItem
	 * @param isFixRate
	 * @private
	 */
	private setFixRateRelPropsReadonly(resItem: T, isFixRate: boolean){
		this.setPropertiesReadonly(resItem, ['CostUnit', 'DayWorkRateUnit'], isFixRate);
	}

	/**
	 * set Co2Project property readonly
	 * @param resItem
	 */
	public setCo2ProjectReadonly (resItem: T){
		this.setPropertiesReadonly(resItem, ['Co2Project'], true);
	}

	public setByEditableFlag(resItem: T, isFixRate: boolean) {
		this.setFixRateRelPropsReadonly(resItem, isFixRate);
		if(resItem.EstResourceTypeFk === EstimateMainResourceType.CostCode){
			this.setPropertiesReadonly(resItem, ['BasUomFk', 'BasCurrencyFk', 'DescriptionInfo1'], !resItem.IsEditable);
			this.setPropertiesReadonly(resItem, ['DescriptionInfo'], true);
		} else {
			if(resItem.EstResourceTypeFk === EstimateMainResourceType.SubItem){
				this.setPropertiesReadonly(resItem, ['DescriptionInfo', 'DescriptionInfo1'], false);
			} else if(resItem.EstResourceTypeFk === EstimateMainResourceType.Assembly){
				this.setCo2ProjectReadonly(resItem);
			} else if(resItem.EstResourceTypeFk === EstimateMainResourceType.InternalTextLine || resItem.EstResourceTypeFk === EstimateMainResourceType.TextLine){
				this.setPropertiesReadonly(resItem, ['DescriptionInfo', 'CommentText', 'Sorting'], false);
				const fields : string[] = [];
				forOwn(resItem, function(value, key) {
					if(key !== 'DescriptionInfo' && key !== 'CommentText' &&  key !== 'Sorting') {
						fields.push(key);
					}
				});
				this.setPropertiesReadonly(resItem, fields, true);
			} else if(resItem.EstResourceTypeFk === EstimateMainResourceType.Material || resItem.EstResourceTypeFk === EstimateMainResourceType.Assembly || resItem.EstResourceTypeFk === EstimateMainResourceType.Plant){
				this.setPropertiesReadonly(resItem, ['DescriptionInfo', 'DescriptionInfo1'], true);
			}
		}
	}

	public setDisabledChildrenReadOnly(items: T[]){
		items.forEach(item => {
			if(item && item.Id && item.cssClass !== 'row-readonly-background row-readonly-background-composite' ){
				if(item.EstResourceFk){
					const parent = items.find(e => e.Id === item.EstResourceFk);
					if(parent){
						this.setIsDisabledReadOnly(item, parent);
					}
				}
			}
		});
	}

	public processComputationalLineTypeItem(item: T){
		if(!item){
			return;
		}
		this.readOnly([item], true);
		this.setPropertiesReadonly(item, ['QuantityDetail', 'Sorting'], false);
	}

	public setIndirectCost(resources: T[], isIndirectCost: boolean = false) {
		resources.forEach((res) => {
			res.IsIndirectCost = res && res.EstRuleSourceFk ? res.IsIndirectCost : isIndirectCost;
			this.setPropertiesReadonly(res, ['IsIndirectCost'], res.IsIndirectCost);
		});
	}
}